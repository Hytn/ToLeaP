[
  {
    "conversations": [
      {
        "from": "human",
        "value": "\u8bf7\u95ee\u5317\u4eac\u7684\u5f53\u524d\u5929\u6c14\u72b6\u51b5\u5982\u4f55\uff1f\u8fd8\u6709\uff0c\u4e0a\u6d77\u7684\u5929\u6c14\u60c5\u51b5\u662f\u600e\u6837\u7684\uff1f"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Beijing, China\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Beijing, China\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "\u8bf7\u95ee\u5317\u4eac\u7684\u5f53\u524d\u5929\u6c14\u72b6\u51b5\u5982\u4f55\uff1f\u8fd8\u6709\uff0c\u4e0a\u6d77\u7684\u5929\u6c14\u60c5\u51b5\u662f\u600e\u6837\u7684\uff1f"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Shanghai, China\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Shanghai, China\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather conditions for a specified city and state.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the weather, in the format of 'City, State', such as 'San Francisco, CA' if State for the city exists. 'City, Country' if State for the city doesn't exist.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of temperature for the weather report.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Could you tell me the current weather conditions for Boston, MA and also for San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "Could you tell me the current weather conditions for Boston, MA and also for San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather conditions for a specified city and state.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the weather, in the format of 'City, State', such as 'San Francisco, CA' if State for the city exists. 'City, Country' if State for the city doesn't exist. Use short form for state.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of temperature for the weather report.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "<<question>> What\\'s the weather like in the two cities of Boston and San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "<<question>> What\\'s the weather like in the two cities of Boston and San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather conditions for a specified city and state.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the weather, in the format of 'City, State', such as 'San Francisco, CA' if State for the city exists. 'City, Country' if State for the city doesn't exist. Use short form for the state\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of temperature for the weather report.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "\u00bfPodr\u00edas decirme las condiciones actuales del clima en Canc\u00fan, QR, Playa del Carmen, QR y Tulum, QR?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Canc\\u00fan, QR\", \"Canc\\\\u00fan, QR\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Canc\\u00fan, QR\", \"Canc\\\\u00fan, QR\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "\u00bfPodr\u00edas decirme las condiciones actuales del clima en Canc\u00fan, QR, Playa del Carmen, QR y Tulum, QR?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Playa del Carmen, QR\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Playa del Carmen, QR\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "\u00bfPodr\u00edas decirme las condiciones actuales del clima en Canc\u00fan, QR, Playa del Carmen, QR y Tulum, QR?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Tulum, QR\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Tulum, QR\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather conditions for a specified city and state.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the weather, in the format of 'City, State', such as 'San Francisco, CA' if State for the city exists. 'City, Country' if State for the city doesn't exist. Use short form if using state name\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of temperature for the weather report.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Could you tell me the current weather in Boston, USA and also in San Francisco, USA?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, USA\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, USA\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      },
      {
        "from": "human",
        "value": "Could you tell me the current weather in Boston, USA and also in San Francisco, USA?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, USA\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, USA\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather information for a specified geographic location.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The geographic location for which to fetch the weather data, in the format of 'City, Country' (e.g., 'London, UK').\"}, \"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data. This should be a fully qualified URL pointing to the Open-Meteo API with the appropriate query parameters for latitude and longitude.\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Could you tell me the current temperature in Boston, MA and San Francisco, please?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      },
      {
        "from": "human",
        "value": "Could you tell me the current temperature in Boston, MA and San Francisco, please?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"], \"url\": [\"\", \"https://api.open-meteo.com/v1/forecast\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather information for a specified location using the Open-Meteo API.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"url\": {\"type\": \"string\", \"description\": \"The API endpoint for fetching weather data, with a default value pointing to the Open-Meteo API service.\", \"default\": \"https://api.open-meteo.com/v1/forecast\"}, \"location\": {\"type\": \"string\", \"description\": \"The geographical location for which to retrieve weather data, in the format of 'City, State', such as 'San Francisco, CA'. If using state name, then use short form.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for temperature values.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"celsius\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "What's the snow like in the two cities of Paris and Bordeaux?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_snow_report\", \"arguments\": {\"location\": [\"Paris, France\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_snow_report\", \"arguments\": {\"location\": [\"Paris, France\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "What's the snow like in the two cities of Paris and Bordeaux?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_snow_report\", \"arguments\": {\"location\": [\"Bordeaux, France\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_snow_report\", \"arguments\": {\"location\": [\"Bordeaux, France\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather conditions for a specified location.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the weather, in the format of 'City, State' (e.g., 'San Francisco, CA'). If city does not have a state, then just mention the name of the city.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for temperature values.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}, {\"name\": \"get_snow_report\", \"description\": \"Retrieves the latest snow report for a specified location, providing details about the snow conditions and weather.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the snow report, in the format of 'City, State' or 'City, Country', such as 'Aspen, CO' or 'Paris, France'.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The temperature unit to be used in the snow report.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "What's the weather like in the two cities of Boston and San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "What's the weather like in the two cities of Boston and San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather conditions for a specified location.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the weather, in the format of 'City, State' (e.g., 'San Francisco, CA'). For state, use short form.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for temperature values.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}, {\"name\": \"get_snow_report\", \"description\": \"Retrieves the latest snow report for a specified location, providing details about the snow conditions and weather.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to get the snow report, in the format of 'City, State', such as 'Aspen, CO'.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The temperature unit to be used in the snow report.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Hi there! Could you please help me manage my tasks? I need to add a task called 'Machine Learning Study Session'. Also, I have completed one of my tasks named 'todo random', and I would like to delete it from my list."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"todo\", \"arguments\": {\"type\": [\"add\"], \"content\": [\"Machine Learning Study Session\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"todo\", \"arguments\": {\"type\": [\"add\"], \"content\": [\"Machine Learning Study Session\"]}}]"
      },
      {
        "from": "human",
        "value": "Hi there! Could you please help me manage my tasks? I need to add a task called 'Machine Learning Study Session'. Also, I have completed one of my tasks named 'todo random', and I would like to delete it from my list."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"todo\", \"arguments\": {\"type\": [\"delete\"], \"content\": [\"todo random\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"todo\", \"arguments\": {\"type\": [\"delete\"], \"content\": [\"todo random\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"todo\", \"description\": \"Manages a todo list allowing the user to add, delete, or update items.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"type\", \"content\"], \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"The action to be performed on the todo list.\", \"enum\": [\"add\", \"delete\", \"update\"]}, \"content\": {\"type\": \"string\", \"description\": \"The details of the todo item relevant to the action being performed.\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "What's cost of 2 and 4 gb ram machine on aws ec2 with one CPU?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_aws_pricing\", \"arguments\": {\"memory\": [2], \"cpu\": [\"single\"], \"reigion\": [\"\", \"us-east-1\"], \"operating_system0\": [\"\", \"Linux\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_aws_pricing\", \"arguments\": {\"memory\": [2], \"cpu\": [\"single\"], \"reigion\": [\"\", \"us-east-1\"], \"operating_system0\": [\"\", \"Linux\"]}}]"
      },
      {
        "from": "human",
        "value": "What's cost of 2 and 4 gb ram machine on aws ec2 with one CPU?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_aws_pricing\", \"arguments\": {\"memory\": [4], \"cpu\": [\"single\"], \"reigion\": [\"\", \"us-east-1\"], \"operating_system0\": [\"\", \"Linux\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_aws_pricing\", \"arguments\": {\"memory\": [4], \"cpu\": [\"single\"], \"reigion\": [\"\", \"us-east-1\"], \"operating_system0\": [\"\", \"Linux\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_aws_pricing\", \"description\": \"Retrieves the pricing information for an AWS EC2 instance based on the provided memory and CPU requirements. The returned pricing is an estimate and may vary based on region and availability.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"memory\", \"cpu\"], \"properties\": {\"memory\": {\"type\": \"integer\", \"description\": \"The amount of memory required for the instance in gigabytes (GB).\"}, \"cpu\": {\"type\": \"string\", \"description\": \"The number of CPU units required for the instance. Valid options are 'single', 'dual', or 'quad'.\", \"enum\": [\"single\", \"dual\", \"quad\"]}, \"region\": {\"type\": \"string\", \"description\": \"The AWS region where the instance will be launched, such as 'us-east-1' or 'eu-central-1'.\", \"default\": \"us-east-1\"}, \"operating_system\": {\"type\": \"string\", \"description\": \"The operating system to be used on the instance.\", \"enum\": [\"Linux\", \"Windows\"], \"default\": \"Linux\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "I need to make a couple of hotel reservations. First, secure a room for 2 adults and 1 child at the Sheraton Hotel in New York with check-in on May 1, 2022, and check-out on May 5, 2022. Then, reserve a room for 1 adult and 2 children at the Marriott in Los Angeles, checking in on June 1, 2022, and checking out on June 10, 2022."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"hotel_booking_book\", \"arguments\": {\"hotel_name\": [\"Sheraton Hotel\", \"Sheraton\", \"Hotel Sheraton\"], \"location\": [\"New York, NY\"], \"check_in\": [\"2022-05-01\"], \"check_out\": [\"2022-05-05\"], \"adults\": [2], \"children\": [1]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"hotel_booking_book\", \"arguments\": {\"hotel_name\": [\"Sheraton Hotel\", \"Sheraton\", \"Hotel Sheraton\"], \"location\": [\"New York, NY\"], \"check_in\": [\"2022-05-01\"], \"check_out\": [\"2022-05-05\"], \"adults\": [2], \"children\": [1]}}]"
      },
      {
        "from": "human",
        "value": "I need to make a couple of hotel reservations. First, secure a room for 2 adults and 1 child at the Sheraton Hotel in New York with check-in on May 1, 2022, and check-out on May 5, 2022. Then, reserve a room for 1 adult and 2 children at the Marriott in Los Angeles, checking in on June 1, 2022, and checking out on June 10, 2022."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"hotel_booking_book\", \"arguments\": {\"hotel_name\": [\"Marriott\"], \"location\": [\"Los Angeles, CA\"], \"check_in\": [\"2022-06-01\"], \"check_out\": [\"2022-06-10\"], \"adults\": [1], \"children\": [2]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"hotel_booking_book\", \"arguments\": {\"hotel_name\": [\"Marriott\"], \"location\": [\"Los Angeles, CA\"], \"check_in\": [\"2022-06-01\"], \"check_out\": [\"2022-06-10\"], \"adults\": [1], \"children\": [2]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"hotel_booking_book\", \"description\": \"Book a hotel room at the specified location for the specified number of adults and children, ensuring the accommodation dates are available.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"hotel_name\", \"location\", \"check_in\", \"check_out\", \"adults\", \"children\"], \"properties\": {\"hotel_name\": {\"type\": \"string\", \"description\": \"The name of the hotel to book.\"}, \"location\": {\"type\": \"string\", \"description\": \"The location of the hotel, in the format of 'City, State', such as 'San Francisco, CA' or 'New York, NY'.\"}, \"check_in\": {\"type\": \"string\", \"description\": \"The check-in date for the booking, in the format 'YYYY-MM-DD'.\"}, \"check_out\": {\"type\": \"string\", \"description\": \"The check-out date for the booking, in the format 'YYYY-MM-DD'.\"}, \"adults\": {\"type\": \"integer\", \"description\": \"The number of adults included in the booking.\"}, \"children\": {\"type\": \"integer\", \"description\": \"The number of children included in the booking.\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "I had 8 pieces of frozen mango and a chai tea.\n\nEarlier I had two slices of pepperoni pizza and a coffee"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"frozen mango\"], \"portion_amount\": [8], \"portion_unit\": [\"piece\"], \"meal_type\": [\"\", \"snack\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"frozen mango\"], \"portion_amount\": [8], \"portion_unit\": [\"piece\"], \"meal_type\": [\"\", \"snack\"]}}]"
      },
      {
        "from": "human",
        "value": "I had 8 pieces of frozen mango and a chai tea.\n\nEarlier I had two slices of pepperoni pizza and a coffee"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"chai tea\"], \"portion_amount\": [1], \"portion_unit\": [\"cup\"], \"meal_type\": [\"\", \"snack\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"chai tea\"], \"portion_amount\": [1], \"portion_unit\": [\"cup\"], \"meal_type\": [\"\", \"snack\"]}}]"
      },
      {
        "from": "human",
        "value": "I had 8 pieces of frozen mango and a chai tea.\n\nEarlier I had two slices of pepperoni pizza and a coffee"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"pepperoni pizza\"], \"portion_amount\": [2], \"portion_unit\": [\"slice\"], \"meal_type\": [\"\", \"snack\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"pepperoni pizza\"], \"portion_amount\": [2], \"portion_unit\": [\"slice\"], \"meal_type\": [\"\", \"snack\"]}}]"
      },
      {
        "from": "human",
        "value": "I had 8 pieces of frozen mango and a chai tea.\n\nEarlier I had two slices of pepperoni pizza and a coffee"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"coffee\"], \"portion_amount\": [1], \"portion_unit\": [\"cup\"], \"meal_type\": [\"\", \"snack\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"coffee\"], \"portion_amount\": [1], \"portion_unit\": [\"cup\"], \"meal_type\": [\"\", \"snack\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"log_food\", \"description\": \"Logs a food item with a given portion size to track dietary intake.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"food_name\", \"portion_amount\", \"portion_unit\"], \"properties\": {\"food_name\": {\"type\": \"string\", \"description\": \"The name of the food to log, such as 'apple', 'bread', or 'chicken breast'.\"}, \"portion_amount\": {\"type\": \"float\", \"description\": \"The amount of the food item that was consumed, specified in the unit given by portion_unit.\"}, \"portion_unit\": {\"type\": \"string\", \"description\": \"The unit of measure for the portion amount, such as 'cup', 'grams', or 'slice'.\", \"enum\": [\"cup\", \"grams\", \"slice\", \"piece\", \"tablespoon\"]}, \"meal_type\": {\"type\": \"string\", \"description\": \"The type of meal or snack this food item is being logged for.\", \"enum\": [\"breakfast\", \"lunch\", \"dinner\", \"snack\"], \"default\": \"snack\"}, \"log_date\": {\"type\": \"string\", \"description\": \"The date and time when the food was consumed, in ISO 8601 format such as 'YYYY-MM-DDTHH:MM:SSZ'.\", \"default\": null}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "For breakfast I had a 12 ounce iced coffee and a banana.\n\nFor lunch I had a quesadilla\n\nBreakfast four ounces of asparagus, two eggs, one piece of gluten free bread."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"iced coffee\"], \"portion_amount\": [12], \"portion_unit\": [\"ounces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"iced coffee\"], \"portion_amount\": [12], \"portion_unit\": [\"ounces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "human",
        "value": "For breakfast I had a 12 ounce iced coffee and a banana.\n\nFor lunch I had a quesadilla\n\nBreakfast four ounces of asparagus, two eggs, one piece of gluten free bread."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"banana\"], \"portion_amount\": [1], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"banana\"], \"portion_amount\": [1], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "human",
        "value": "For breakfast I had a 12 ounce iced coffee and a banana.\n\nFor lunch I had a quesadilla\n\nBreakfast four ounces of asparagus, two eggs, one piece of gluten free bread."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"quesadilla\"], \"portion_amount\": [1], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"lunch\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"quesadilla\"], \"portion_amount\": [1], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"lunch\"]}}]"
      },
      {
        "from": "human",
        "value": "For breakfast I had a 12 ounce iced coffee and a banana.\n\nFor lunch I had a quesadilla\n\nBreakfast four ounces of asparagus, two eggs, one piece of gluten free bread."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"asparagus\"], \"portion_amount\": [4], \"portion_unit\": [\"ounces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"asparagus\"], \"portion_amount\": [4], \"portion_unit\": [\"ounces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "human",
        "value": "For breakfast I had a 12 ounce iced coffee and a banana.\n\nFor lunch I had a quesadilla\n\nBreakfast four ounces of asparagus, two eggs, one piece of gluten free bread."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"eggs\"], \"portion_amount\": [2], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"eggs\"], \"portion_amount\": [2], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "human",
        "value": "For breakfast I had a 12 ounce iced coffee and a banana.\n\nFor lunch I had a quesadilla\n\nBreakfast four ounces of asparagus, two eggs, one piece of gluten free bread."
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"gluten free bread\"], \"portion_amount\": [1], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"breakfast\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"log_food\", \"arguments\": {\"food_name\": [\"gluten free bread\"], \"portion_amount\": [1], \"portion_unit\": [\"pieces\"], \"meal_name\": [\"breakfast\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"log_food\", \"description\": \"Logs a food item with details about the portion size and the meal it is associated with.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"food_name\", \"portion_amount\", \"meal_name\"], \"properties\": {\"food_name\": {\"type\": \"string\", \"description\": \"The name of the food to log.\"}, \"portion_amount\": {\"type\": \"float\", \"description\": \"The amount of the food item that was consumed, in specified units.\"}, \"portion_unit\": {\"type\": \"string\", \"description\": \"The unit of measure for the portion amount. Choose a unit such as 'grams', 'ounces', 'pieces', 'cups', or 'tablespoons'.\", \"enum\": [\"grams\", \"ounces\", \"pieces\", \"cups\", \"tablespoons\"], \"default\": \"grams\"}, \"meal_name\": {\"type\": \"string\", \"description\": \"The name of the meal with which the food item is associated. Options include 'breakfast', 'lunch', 'dinner', or 'snack'.\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "Could you tell me the current weather in Boston, MA and also in San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "Could you tell me the current weather in Boston, MA and also in San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather for a specified location, with the option to get the result in either Celsius or Fahrenheit.\", \"parameters\": {\"type\": \"dict\", \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which to retrieve the weather, in the format of 'City, State', such as 'San Francisco, CA'. If using state name then use short form.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of temperature for the weather report.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}, \"required\": [\"location\"]}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "What's the weather like in the two cities of Boston and San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"Boston, MA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "human",
        "value": "What's the weather like in the two cities of Boston and San Francisco?"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"get_current_weather\", \"arguments\": {\"location\": [\"San Francisco, CA\"], \"unit\": [\"\", \"fahrenheit\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"get_current_weather\", \"description\": \"Retrieves the current weather information for a specified location.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"location\"], \"properties\": {\"location\": {\"type\": \"string\", \"description\": \"The location for which the current weather is requested, in the format of 'City, State', such as 'San Francisco, CA' or 'New York, NY'. Use short form for state\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for temperature values.\", \"enum\": [\"celsius\", \"fahrenheit\"], \"default\": \"fahrenheit\"}}}}]"
  },
  {
    "conversations": [
      {
        "from": "human",
        "value": "list file in c drive and make file called testing.txt"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"cmd_controller.execute\", \"arguments\": {\"command\": [\"dir c:\\\\\", \"dir c:\\\\\\\\\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"cmd_controller.execute\", \"arguments\": {\"command\": [\"dir c:\\\\\", \"dir c:\\\\\\\\\"]}}]"
      },
      {
        "from": "human",
        "value": "list file in c drive and make file called testing.txt"
      },
      {
        "from": "function_call",
        "value": "[{\"name\": \"cmd_controller.execute\", \"arguments\": {\"command\": [\"echo.>C:\\\\testing.txt\", \"echo.>C:\\\\\\\\testing.txt\"], \"unit\": [\"\", \"N/A\"]}}]"
      },
      {
        "from": "observation",
        "value": ""
      },
      {
        "from": "gpt",
        "value": "[{\"name\": \"cmd_controller.execute\", \"arguments\": {\"command\": [\"echo.>C:\\\\testing.txt\", \"echo.>C:\\\\\\\\testing.txt\"], \"unit\": [\"\", \"N/A\"]}}]"
      }
    ],
    "system": "You are an expert in composing functions. You are given a question and a set of possible functions. Based on the question, you will need to make one or more function/tool calls to achieve the purpose. \n If none of the function can be used, point it out. If the given question lacks the parameters required by the function, also point it out.\n You should only return the function calls in your response.\n If you decide to invoke any of the function(s), you MUST put it in the format of [func_name1(params_name1=params_value1, params_name2=params_value2...), func_name2(params)] \n You SHOULD NOT include any other text in the response. \n At each turn, your should try your best to complete the tasks requested by the user within the current turn. Continue to output functions to call until you have fulfilled the user's request to the best of your ability. Once you have no more functions to call, the system will consider the current turn complete and proceed to the next turn or task.",
    "tools": "[{\"name\": \"cmd_controller.execute\", \"description\": \"Executes a specified command in the Windows operating system using the os.system() function.\", \"parameters\": {\"type\": \"dict\", \"required\": [\"command\"], \"properties\": {\"command\": {\"type\": \"string\", \"description\": \"The command line instruction to be passed to os.system() for execution, formatted as a Windows command prompt statement.\"}, \"unit\": {\"type\": \"string\", \"description\": \"The unit of measurement for the command execution time, such as 'seconds' or 'milliseconds'\", \"enum\": [\"seconds\", \"milliseconds\"], \"default\": \"N/A\"}}}}]"
  }
]