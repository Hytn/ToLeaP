{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getFilmDetails', 'api_description': 'Retrieve details of a film', 'field': 'Entertainment/Film', 'parameters': {'title': {'type': 'str', 'description': 'The title of the film you want to get details of'}}, 'required': ['title'], 'responses': {'title': {'type': 'str', 'description': 'The title of the film'}, 'genre': {'type': 'str', 'description': 'The genre of the film'}, 'director': {'type': 'str', 'description': 'The director of the film'}, 'release_date': {'type': 'str', 'description': 'The release date of the film'}, 'rating': {'type': 'float', 'description': 'The rating of the film'}}}, {'api_name': 'getFilmInfo', 'api_description': 'Retrieve information about a film', 'field': 'Entertainment/Film', 'parameters': {'film_name': {'type': 'str', 'description': 'The name of the film you want information about'}}, 'required': ['film_name'], 'responses': {'title': {'type': 'str', 'description': 'The title of the film'}, 'release_year': {'type': 'int', 'description': 'The year the film was released'}, 'director': {'type': 'str', 'description': \"The name of the film's director\"}, 'actors': {'type': 'str', 'description': 'The actors starring in the film'}, 'plot': {'type': 'str', 'description': \"A brief summary of the film's plot\"}}}, {'api_name': 'getFilmHistory', 'api_description': 'Retrieve information about the history of films', 'field': 'Film Studies/Film history', 'parameters': {}, 'required': [], 'responses': {'film_history': {'type': 'str', 'description': 'Information about the history of films'}}}, {'api_name': 'getShowDetails', 'api_description': 'Retrieve details about a television show', 'field': 'Entertainment/Television', 'parameters': {'show_name': {'type': 'str', 'description': 'The name of the television show'}}, 'required': ['show_name'], 'responses': {'genre': {'type': 'str', 'description': 'The genre of the television show'}, 'cast': {'type': 'str', 'description': 'The cast members of the television show'}, 'rating': {'type': 'float', 'description': 'The rating of the television show out of 10'}}}, {'api_name': 'getRomanceNovelDetails', 'api_description': 'Retrieve details of a specific romance novel', 'field': 'Literature/Romance', 'parameters': {'novel_id': {'type': 'str', 'description': 'The unique identifier of the romance novel'}}, 'required': ['novel_id'], 'responses': {'title': {'type': 'str', 'description': 'The title of the romance novel'}, 'author': {'type': 'str', 'description': 'The author of the romance novel'}, 'genre': {'type': 'str', 'description': 'The genre of the romance novel'}, 'description': {'type': 'str', 'description': 'A brief description of the romance novel'}, 'publication_date': {'type': 'str', 'description': 'The publication date of the romance novel'}}}]\ntask_instruction = \"Tell me the details of the film \"Pulp Fiction\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getFilmDetails', 'parameters': {'title': 'Pulp Fiction'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2', 'API_call_3', 'API_call_4']}]", "predict": "Please chooose the needed apis and return api_calling list according to the task_instruction.\nAction: getFilmDetails\nAction Input: {\n  \"title\": \"Pulp Fiction\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getFilmInfo', 'api_description': 'Retrieve information about a film', 'field': 'Entertainment/Film', 'parameters': {'film_name': {'type': 'str', 'description': 'The name of the film you want information about'}}, 'required': ['film_name'], 'responses': {'title': {'type': 'str', 'description': 'The title of the film'}, 'release_year': {'type': 'int', 'description': 'The year the film was released'}, 'director': {'type': 'str', 'description': \"The name of the film's director\"}, 'actors': {'type': 'str', 'description': 'The actors starring in the film'}, 'plot': {'type': 'str', 'description': \"A brief summary of the film's plot\"}}}, {'api_name': 'getFilmDetails', 'api_description': 'Retrieve details of a film', 'field': 'Entertainment/Film', 'parameters': {'title': {'type': 'str', 'description': 'The title of the film you want to get details of'}}, 'required': ['title'], 'responses': {'title': {'type': 'str', 'description': 'The title of the film'}, 'genre': {'type': 'str', 'description': 'The genre of the film'}, 'director': {'type': 'str', 'description': 'The director of the film'}, 'release_date': {'type': 'str', 'description': 'The release date of the film'}, 'rating': {'type': 'float', 'description': 'The rating of the film'}}}, {'api_name': 'getFilmHistory', 'api_description': 'Retrieve information about the history of films', 'field': 'Film Studies/Film history', 'parameters': {}, 'required': [], 'responses': {'film_history': {'type': 'str', 'description': 'Information about the history of films'}}}, {'api_name': 'getShowDetails', 'api_description': 'Retrieve details about a television show', 'field': 'Entertainment/Television', 'parameters': {'show_name': {'type': 'str', 'description': 'The name of the television show'}}, 'required': ['show_name'], 'responses': {'genre': {'type': 'str', 'description': 'The genre of the television show'}, 'cast': {'type': 'str', 'description': 'The cast members of the television show'}, 'rating': {'type': 'float', 'description': 'The rating of the television show out of 10'}}}, {'api_name': 'getTVShowInfo', 'api_description': 'Retrieve information about a TV show', 'field': 'Entertainment/Television', 'parameters': {'tv_show': {'type': 'str', 'description': 'The name of the TV show for which you want to get information'}}, 'required': ['tv_show'], 'responses': {'title': {'type': 'str', 'description': 'The title of the TV show'}, 'genre': {'type': 'str', 'description': 'The genre of the TV show'}, 'duration': {'type': 'int', 'description': 'The duration of each episode in minutes'}}}]\ntask_instruction = \"Tell me the information about the film \"Inception\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getFilmInfo', 'parameters': {'film_name': 'Inception'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2', 'API_call_3', 'API_call_4']}]", "predict": "Please chooose the needed apis and return api_calling list according to the task_instruction.\nAction: getFilmInfo\nAction Input: {\n  \"film_name\": \"Inception\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getSongs', 'api_description': 'Retrieve a list of songs based on specified criteria', 'field': 'Entertainment/Music', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the songs (e.g., pop, rock, hip-hop)'}, 'artist': {'type': 'str', 'description': 'The name of the artist of the songs'}, 'year': {'type': 'int', 'description': 'The year in which the songs were released'}}, 'required': [], 'responses': {'songs': {'type': 'str', 'description': 'A list of songs meeting the specified criteria'}}}, {'api_name': 'wordCount', 'api_description': 'Count the number of words in a given text', 'field': 'Journalism/Copyediting', 'parameters': {'text': {'type': 'str', 'description': 'The text to count the words'}}, 'required': ['text'], 'responses': {'word_count': {'type': 'int', 'description': 'The number of words in the text'}}}, {'api_name': 'countWords', 'api_description': 'Count the number of words in a given text', 'field': 'Linguistics/Text Linguistics', 'parameters': {'text': {'type': 'str', 'description': 'The text for which you want to count the words'}}, 'required': ['text'], 'responses': {'word_count': {'type': 'int', 'description': 'The number of words in the given text'}}}, {'api_name': 'getMusicLyrics', 'api_description': 'Retrieve lyrics for a popular music', 'field': 'Media Studies/Media and Popular Music', 'parameters': {'title': {'type': 'str', 'description': 'The title of the popular music'}, 'artist': {'type': 'str', 'description': 'The artist of the popular music'}}, 'required': ['title', 'artist'], 'responses': {'lyrics': {'type': 'str', 'description': 'The lyrics of the popular music'}}}, {'api_name': 'getLyrics', 'api_description': 'Retrieve the lyrics of a music track', 'field': 'Music/Music cognition', 'parameters': {'track': {'type': 'str', 'description': 'The name or ID of a music track'}}, 'required': ['track'], 'responses': {'lyrics': {'type': 'str', 'description': 'The lyrics of the specified music track'}}}]\ntask_instruction = \"Provide me a list of songs.\"\nOutput:\n [/INST]", "label": "[{'api': 'getSongs', 'parameters': {}, 'responses': ['API_call_0']}]", "predict": "Please choose a song from the list provided.\nAction: getSongs\nAction Input: {}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'playMusic', 'api_description': 'Play music on a smart speaker', 'field': 'Internet of Things/Home Automation', 'parameters': {'speaker': {'type': 'str', 'description': 'The smart speaker to play the music on (e.g., living room speaker, bedroom speaker, kitchen speaker)'}, 'song': {'type': 'str', 'description': \"The name of the song or playlist to play (e.g., 'My favorite playlist', 'Bohemian Rhapsody')\"}, 'volume': {'type': 'int', 'description': 'The desired volume level of the music (0-100)'}}, 'required': ['speaker', 'song'], 'responses': {'status': {'type': 'str', 'description': 'The status of the speaker after playing the music'}}}, {'api_name': 'playSong', 'api_description': 'Play a specific song from a music library', 'field': 'Entertainment/Music', 'parameters': {'song_name': {'type': 'str', 'description': 'The name of the song to be played'}, 'artist': {'type': 'str', 'description': 'The artist who performed the song'}, 'genre': {'type': 'str', 'description': 'The genre of the song'}}, 'required': ['song_name'], 'responses': {'status': {'type': 'str', 'description': 'The status of the song playback (e.g., playing, paused, stopped)'}, 'duration': {'type': 'float', 'description': 'The duration of the song in seconds'}}}, {'api_name': 'playRadio', 'api_description': 'Play a radio station', 'field': 'Media/Media and Radio', 'parameters': {'station': {'type': 'str', 'description': 'The name or frequency of the radio station to be played'}}, 'required': ['station'], 'responses': {'status': {'type': 'str', 'description': 'The status of the radio playback (e.g., playing, paused, stopped, buffering)'}}}, {'api_name': 'playMedia', 'api_description': 'Play media files with advanced media technology', 'field': 'Media/Media Technology', 'parameters': {'file_path': {'type': 'str', 'description': 'The path of the media file to be played'}}, 'required': ['file_path'], 'responses': {'status': {'type': 'str', 'description': 'The status of the media player (e.g., playing, paused, stopped)'}, 'duration': {'type': 'int', 'description': 'The duration of the media file in seconds'}, 'current_time': {'type': 'int', 'description': 'The current playback time of the media file in seconds'}}}, {'api_name': 'playSoundEffect', 'api_description': 'Play a sound effect in the game', 'field': 'Gaming/Game sound design', 'parameters': {'effect_name': {'type': 'str', 'description': 'The name of the sound effect to be played (e.g., explosion, gunfire, footsteps)'}, 'volume': {'type': 'float', 'description': 'The volume level of the sound effect (e.g., 0.0 - 1.0)'}, 'panning': {'type': 'float', 'description': 'The panning position of the sound effect in stereo sound (e.g., -1.0 (left) to 1.0 (right))'}, 'loop': {'type': 'bool', 'description': 'Specify whether the sound effect should be played in a loop (e.g., true, false)'}}, 'required': ['effect_name'], 'responses': {'status': {'type': 'str', 'description': 'The status or result of playing the sound effect (e.g., success, error)'}}}]\ntask_instruction = \"Play the song \"Midnight City\".\"\nOutput:\n [/INST]", "label": "[{'api': 'playSong', 'parameters': {'song_name': 'Midnight City'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: playSong\nAction Input: {\n  \"song_name\": \"Midnight City\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'createPlaylist', 'api_description': 'Create a new playlist in the music library', 'field': 'Entertainment/Music', 'parameters': {'playlist_name': {'type': 'str', 'description': 'The name of the playlist to be created'}}, 'required': ['playlist_name'], 'responses': {'status': {'type': 'str', 'description': 'The status of the playlist creation'}}}, {'api_name': 'addSongToPlaylist', 'api_description': 'Add a song to an existing playlist', 'field': 'Entertainment/Music', 'parameters': {'playlist_name': {'type': 'str', 'description': 'The name of the playlist to add the song'}, 'song_name': {'type': 'str', 'description': 'The name of the song to be added'}, 'artist': {'type': 'str', 'description': 'The artist who performed the song'}}, 'required': ['playlist_name', 'song_name'], 'responses': {'status': {'type': 'str', 'description': 'The status of the song addition to the playlist'}}}, {'api_name': 'addTrackToPlaylist', 'api_description': 'Add a track to an existing playlist', 'field': 'Music/Music management', 'parameters': {'playlist_id': {'type': 'int', 'description': 'The identifier of the target playlist'}, 'track_id': {'type': 'int', 'description': 'The identifier of the track to be added'}}, 'required': ['playlist_id', 'track_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the track was successfully added to the playlist'}}}, {'api_name': 'createDeck', 'api_description': 'Create a new deck of cards', 'field': 'Gaming/Card games', 'parameters': {}, 'required': [], 'responses': {'deck_id': {'type': 'str', 'description': 'The unique identifier for the deck'}, 'remaining': {'type': 'int', 'description': 'The number of cards remaining in the deck'}}}, {'api_name': 'createTheater', 'api_description': 'Create a new theater', 'field': 'Theater/Theater Administration', 'parameters': {'name': {'type': 'str', 'description': 'The name of the theater'}, 'location': {'type': 'str', 'description': 'The location of the theater'}, 'capacity': {'type': 'int', 'description': 'The maximum capacity of the theater'}}, 'required': ['name', 'location'], 'responses': {'theater_id': {'type': 'str', 'description': 'The unique ID assigned to the created theater'}}}]\ntask_instruction = \"Create a playlist called \"Road Trip Vibes\".\"\nOutput:\n [/INST]", "label": "[{'api': 'createPlaylist', 'parameters': {'playlist_name': 'Road Trip Vibes'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed API from the list provided and return the API calling list according to the task instruction.\n\nThe API calling list should contain the following API calls:\n1. addSongToPlaylist: add a song to the playlist \"Road Trip Vibes\".\n2. createPlaylist: create a new playlist called \"Road Trip Vibes\".\n3. addTrackToPlaylist: add a track to the playlist \"Road Trip Vibes\".\n4. createDeck: create a new deck of cards.\n5. createTheater: create a new theater.\n\nPlease let me know if you need any further assistance.\nAction: addSongToPlaylist\nAction Input: {\n  \"playlist_name\": \"Road Trip Vibes\",\n  \"song_name\": \"Sweet Home Alabama\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'addSongToPlaylist', 'api_description': 'Add a song to an existing playlist', 'field': 'Entertainment/Music', 'parameters': {'playlist_name': {'type': 'str', 'description': 'The name of the playlist to add the song'}, 'song_name': {'type': 'str', 'description': 'The name of the song to be added'}, 'artist': {'type': 'str', 'description': 'The artist who performed the song'}}, 'required': ['playlist_name', 'song_name'], 'responses': {'status': {'type': 'str', 'description': 'The status of the song addition to the playlist'}}}, {'api_name': 'addTrackToPlaylist', 'api_description': 'Add a track to an existing playlist', 'field': 'Music/Music management', 'parameters': {'playlist_id': {'type': 'int', 'description': 'The identifier of the target playlist'}, 'track_id': {'type': 'int', 'description': 'The identifier of the track to be added'}}, 'required': ['playlist_id', 'track_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the track was successfully added to the playlist'}}}, {'api_name': 'addFestival', 'api_description': 'Add a new festival to the database', 'field': 'Event Management/Festivals and Fairs', 'parameters': {'festival_name': {'type': 'str', 'description': 'The name of the festival'}, 'location': {'type': 'str', 'description': 'The location of the festival'}, 'date': {'type': 'str', 'description': 'The date of the festival'}, 'organizer': {'type': 'str', 'description': 'The organizer of the festival'}}, 'required': ['festival_name', 'location', 'date', 'organizer'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the festival was successfully added'}}}, {'api_name': 'addPage', 'api_description': 'Add a new page to an existing website', 'field': 'Information Technology/Web Development', 'parameters': {'website_id': {'type': 'str', 'description': 'The ID of the website to which the page needs to be added'}, 'page_title': {'type': 'str', 'description': 'The title of the new page'}, 'content': {'type': 'str', 'description': 'The content to be displayed on the new page'}, 'layout': {'type': 'str', 'description': 'The layout of the new page'}}, 'required': ['website_id', 'page_title'], 'responses': {'status': {'type': 'str', 'description': 'The status of the page addition process'}}}, {'api_name': 'addBook', 'api_description': 'Add a new book to the library', 'field': 'Publishing/Library sciences', 'parameters': {'library_id': {'type': 'str', 'description': 'The unique identifier of the library'}, 'title': {'type': 'str', 'description': 'The title of the book'}, 'author': {'type': 'str', 'description': 'The author of the book'}, 'genre': {'type': 'str', 'description': 'The genre of the book'}, 'publication_year': {'type': 'int', 'description': 'The year the book was published'}}, 'required': ['library_id', 'title', 'author'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the book was successfully added to the library'}}}]\ntask_instruction = \"Please add the song \"Bohemian Rhapsody\" to the playlist \"Relaxing Vibes\".\"\nOutput:\n [/INST]", "label": "[{'api': 'addSongToPlaylist', 'parameters': {'playlist_name': 'Relaxing Vibes', 'song_name': 'Bohemian Rhapsody'}, 'responses': ['API_call_0']}]", "predict": "\nAdd the song \"Bohemian Rhapsody\" to the playlist \"Relaxing Vibes\".\nAction: addSongToPlaylist\nAction Input: {\n  \"playlist_name\": \"Relaxing Vibes\",\n  \"song_name\": \"Bohemian Rhapsody\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getTVShowInfo', 'api_description': 'Retrieve information about a TV show', 'field': 'Entertainment/Television', 'parameters': {'tv_show': {'type': 'str', 'description': 'The name of the TV show for which you want to get information'}}, 'required': ['tv_show'], 'responses': {'title': {'type': 'str', 'description': 'The title of the TV show'}, 'genre': {'type': 'str', 'description': 'The genre of the TV show'}, 'duration': {'type': 'int', 'description': 'The duration of each episode in minutes'}}}, {'api_name': 'getShowDetails', 'api_description': 'Retrieve details about a television show', 'field': 'Entertainment/Television', 'parameters': {'show_name': {'type': 'str', 'description': 'The name of the television show'}}, 'required': ['show_name'], 'responses': {'genre': {'type': 'str', 'description': 'The genre of the television show'}, 'cast': {'type': 'str', 'description': 'The cast members of the television show'}, 'rating': {'type': 'float', 'description': 'The rating of the television show out of 10'}}}, {'api_name': 'getTelevisionAd', 'api_description': 'Retrieve information about a television advertisement', 'field': 'Advertising/Television advertising', 'parameters': {'ad_id': {'type': 'str', 'description': 'The ID of the television advertisement to retrieve information for'}}, 'required': ['ad_id'], 'responses': {'ad_length': {'type': 'int', 'description': 'The length in seconds of the television advertisement'}, 'ad_type': {'type': 'str', 'description': 'The type of the television advertisement (e.g., commercial, infomercial)'}, 'ad_airtime': {'type': 'str', 'description': 'The airtime of the television advertisement (e.g., prime time, daytime)'}}}, {'api_name': 'getTVAds', 'api_description': 'Retrieve television advertising information', 'field': 'Advertising/Television advertising', 'parameters': {'brand': {'type': 'str', 'description': 'The brand for which you want to get the advertisements (e.g., Nike, Coca-Cola, Apple)'}, 'time_slot': {'type': 'str', 'description': 'Specify a time slot for the advertisements (e.g., prime time, daytime, late night)'}}, 'required': ['brand'], 'responses': {'ads': {'type': 'str', 'description': 'The television advertisements for the specified brand'}}}, {'api_name': 'getTelevisionAdvertising', 'api_description': 'Retrieve television advertising information', 'field': 'Advertising/Television advertising', 'parameters': {'brand': {'type': 'str', 'description': 'The brand for which you want to get television advertising information (e.g., Nike, Apple, Coca-Cola)'}, 'duration': {'type': 'int', 'description': 'The desired duration of the television advertising in seconds (e.g., 30, 60)'}, 'time_of_day': {'type': 'str', 'description': 'Specify a time of day for television advertising (e.g., morning, afternoon, prime time)'}, 'channel': {'type': 'str', 'description': 'The desired television channel on which the advertising should be targeted (e.g., ABC, NBC, ESPN)'}}, 'required': ['brand', 'duration'], 'responses': {'advertising_info': {'type': 'str', 'description': 'The information about the television advertising for the specified brand and duration'}, 'air_time': {'type': 'str', 'description': 'The scheduled air time of the television advertising'}, 'channel': {'type': 'str', 'description': 'The television channel on which the advertising is aired'}}}]\ntask_instruction = \"Tell me about the TV show \"Game of Thrones\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getTVShowInfo', 'parameters': {'tv_show': 'Game of Thrones'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2']}]", "predict": "\nAction: getTVShowInfo\nAction Input: {\n  \"tv_show\": \"Game of Thrones\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getShowDetails', 'api_description': 'Retrieve details about a television show', 'field': 'Entertainment/Television', 'parameters': {'show_name': {'type': 'str', 'description': 'The name of the television show'}}, 'required': ['show_name'], 'responses': {'genre': {'type': 'str', 'description': 'The genre of the television show'}, 'cast': {'type': 'str', 'description': 'The cast members of the television show'}, 'rating': {'type': 'float', 'description': 'The rating of the television show out of 10'}}}, {'api_name': 'getTVShowInfo', 'api_description': 'Retrieve information about a TV show', 'field': 'Entertainment/Television', 'parameters': {'tv_show': {'type': 'str', 'description': 'The name of the TV show for which you want to get information'}}, 'required': ['tv_show'], 'responses': {'title': {'type': 'str', 'description': 'The title of the TV show'}, 'genre': {'type': 'str', 'description': 'The genre of the TV show'}, 'duration': {'type': 'int', 'description': 'The duration of each episode in minutes'}}}, {'api_name': 'getFilmDetails', 'api_description': 'Retrieve details of a film', 'field': 'Entertainment/Film', 'parameters': {'title': {'type': 'str', 'description': 'The title of the film you want to get details of'}}, 'required': ['title'], 'responses': {'title': {'type': 'str', 'description': 'The title of the film'}, 'genre': {'type': 'str', 'description': 'The genre of the film'}, 'director': {'type': 'str', 'description': 'The director of the film'}, 'release_date': {'type': 'str', 'description': 'The release date of the film'}, 'rating': {'type': 'float', 'description': 'The rating of the film'}}}, {'api_name': 'getPerformanceInfo', 'api_description': 'Retrieve performance information', 'field': 'Cultural Studies/Performance Studies', 'parameters': {'performance_name': {'type': 'str', 'description': 'The name of the performance (e.g., Hamlet, Swan Lake, Les Misérables)'}, 'venue_location': {'type': 'str', 'description': 'The location of the venue where the performance takes place (e.g., New York, London, Sydney)'}, 'start_date': {'type': 'str', 'description': 'The start date of the performance (e.g., 2022-05-20)'}, 'end_date': {'type': 'str', 'description': 'The end date of the performance (e.g., 2022-06-10)'}}, 'required': ['performance_name', 'venue_location'], 'responses': {'performance_details': {'type': 'str', 'description': 'Detailed information about the performance (cast, plot, etc.)'}}}, {'api_name': 'getPlay', 'api_description': 'Retrieve information about a specific play', 'field': 'Theater/Playwriting', 'parameters': {'play_title': {'type': 'str', 'description': 'The title of the play you want information about (e.g., Hamlet, Romeo and Juliet)'}}, 'required': ['play_title'], 'responses': {'plot': {'type': 'str', 'description': 'The plot summary of the play'}, 'characters': {'type': 'str', 'description': 'The list of characters in the play'}}}]\ntask_instruction = \"Provide me with the details of the show \"Stranger Things\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getShowDetails', 'parameters': {'show_name': 'Stranger Things'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2']}]", "predict": "\nPlease choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: getTVShowInfo\nAction Input: {\n  \"tv_show\": \"Stranger Things\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getArtwork', 'api_description': 'Retrieve information about a specific artwork', 'field': 'Entertainment/Visual Arts', 'parameters': {'artwork_id': {'type': 'str', 'description': 'The ID of the artwork you want to retrieve information about'}}, 'required': ['artwork_id'], 'responses': {'title': {'type': 'str', 'description': 'The title of the artwork'}, 'artist': {'type': 'str', 'description': 'The name of the artist who created the artwork'}, 'year': {'type': 'int', 'description': 'The year the artwork was created'}, 'description': {'type': 'str', 'description': 'A brief description of the artwork'}}}, {'api_name': 'getArtworkDetails', 'api_description': 'Retrieve detailed information about a specific artwork', 'field': 'Art/Curatorial Studies', 'parameters': {'artwork_id': {'type': 'str', 'description': 'The unique identifier of the artwork'}}, 'required': ['artwork_id'], 'responses': {'title': {'type': 'str', 'description': 'The title of the artwork'}, 'artist': {'type': 'str', 'description': 'The name of the artist'}, 'description': {'type': 'str', 'description': 'A description of the artwork'}}}, {'api_name': 'getArtWriting', 'api_description': 'Retrieve written content about art', 'field': 'Art and Design/Art Writing', 'parameters': {'keyword': {'type': 'str', 'description': 'A keyword to search for specific art writing (e.g., painting, sculpture)'}, 'language': {'type': 'str', 'description': 'The language in which the art writing is desired (e.g., English, French, Spanish)'}}, 'required': ['keyword'], 'responses': {'content': {'type': 'str', 'description': 'The written content about art related to the specified keyword'}, 'author': {'type': 'str', 'description': 'The author of the art writing'}, 'publication_date': {'type': 'str', 'description': 'The date when the art writing was published'}}}, {'api_name': 'getArtHistory', 'api_description': 'Retrieve information about art history', 'field': 'History/Art History', 'parameters': {'artwork': {'type': 'str', 'description': 'The name of the artwork you want to know about'}, 'artist': {'type': 'str', 'description': 'The name of the artist associated with the artwork'}, 'period': {'type': 'str', 'description': 'The historical period of the artwork (e.g., Renaissance, Baroque)'}}, 'required': ['artwork'], 'responses': {'description': {'type': 'str', 'description': 'A description of the artwork and its historical significance'}, 'artist': {'type': 'str', 'description': 'The name of the artist'}, 'period': {'type': 'str', 'description': 'The historical period of the artwork'}}}, {'api_name': 'getSculptureInfo', 'api_description': 'Retrieve information about a sculpture', 'field': 'Art and Design/Sculpture', 'parameters': {'sculpture_name': {'type': 'str', 'description': 'The name of the sculpture (e.g., David, The Thinker, Venus de Milo)'}}, 'required': ['sculpture_name'], 'responses': {'artist': {'type': 'str', 'description': 'The artist who created the sculpture'}, 'year': {'type': 'int', 'description': 'The year in which the sculpture was created'}, 'material': {'type': 'str', 'description': 'The material used to make the sculpture'}, 'dimensions': {'type': 'str', 'description': 'The dimensions of the sculpture'}}}]\ntask_instruction = \"Tell me about the artwork with the artwork ID '5FRcFgPufhr'.\"\nOutput:\n [/INST]", "label": "[{'api': 'getArtwork', 'parameters': {'artwork_id': '5FRcFgPufhr'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2', 'API_call_3']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: getArtwork\nAction Input: {\n  \"artwork_id\": \"5FRcFgPufhr\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getAnimationInfo', 'api_description': 'Retrieve information about a specific animation', 'field': 'Entertainment/Animation', 'parameters': {'animation_name': {'type': 'str', 'description': 'The name of the animation you want to get information about (e.g., My Neighbor Totoro, Spirited Away, Toy Story)'}, 'release_year': {'type': 'int', 'description': 'The release year of the animation (e.g., 2001, 1995, 1988)'}}, 'required': ['animation_name'], 'responses': {'animation_name': {'type': 'str', 'description': 'The name of the animation'}, 'release_year': {'type': 'int', 'description': 'The release year of the animation'}, 'director': {'type': 'str', 'description': 'The director of the animation'}, 'genre': {'type': 'str', 'description': 'The genre of the animation'}, 'rating': {'type': 'float', 'description': 'The rating of the animation'}}}, {'api_name': 'getAnimationDetails', 'api_description': 'Retrieve details of an animation', 'field': 'Entertainment/Animation', 'parameters': {'animation_title': {'type': 'str', 'description': 'The title of the animation (e.g., Frozen, Toy Story, Spirited Away)'}}, 'required': ['animation_title'], 'responses': {'title': {'type': 'str', 'description': 'The title of the animation'}, 'director': {'type': 'str', 'description': 'The director of the animation'}, 'genre': {'type': 'str', 'description': 'The genre of the animation'}, 'release_year': {'type': 'int', 'description': 'The year the animation was released'}, 'rating': {'type': 'float', 'description': 'The rating of the animation (out of 10)'}}}, {'api_name': 'getGameArt', 'api_description': 'Retrieve game art and animations', 'field': 'Gaming/Game art and animation', 'parameters': {'game': {'type': 'str', 'description': 'The name of the game to retrieve the art and animations for'}}, 'required': ['game'], 'responses': {'art': {'type': 'str', 'description': 'The URL or file path for the game art and animations'}}}, {'api_name': 'createGif', 'api_description': 'Create a custom GIF animation', 'field': 'Graphic Design/GIF Design', 'parameters': {'frames': {'type': 'int', 'description': 'Number of frames in the GIF animation (e.g., 10, 20, 30)'}, 'duration': {'type': 'int', 'description': 'Duration of each frame in milliseconds (e.g., 100, 200, 300)'}, 'size': {'type': 'str', 'description': 'Dimensions of the GIF animation (e.g., 500x500, 800x600)'}, 'colors': {'type': 'int', 'description': 'Number of colors in the GIF palette (e.g., 16, 256, 1024)'}}, 'required': ['frames', 'duration', 'size'], 'responses': {'gif_url': {'type': 'str', 'description': 'URL to download the created GIF animation'}}}, {'api_name': 'getFilmInfo', 'api_description': 'Retrieve information about a film', 'field': 'Entertainment/Film', 'parameters': {'film_name': {'type': 'str', 'description': 'The name of the film you want information about'}}, 'required': ['film_name'], 'responses': {'title': {'type': 'str', 'description': 'The title of the film'}, 'release_year': {'type': 'int', 'description': 'The year the film was released'}, 'director': {'type': 'str', 'description': \"The name of the film's director\"}, 'actors': {'type': 'str', 'description': 'The actors starring in the film'}, 'plot': {'type': 'str', 'description': \"A brief summary of the film's plot\"}}}]\ntask_instruction = \"Tell me the information about the animation \"Toy Story\" released in 2000.\"\nOutput:\n [/INST]", "label": "[{'api': 'getAnimationInfo', 'parameters': {'animation_name': 'Toy Story', 'release_year': '2000'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2', 'API_call_3', 'API_call_4']}]", "predict": "\napi_calling_list = [\n  {\n    api_name: \"getAnimationInfo\",\n    parameters: {\n      \"animation_name\": \"Toy Story\"\n    }\n  },\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getFilmInfo\",\n    parameters: {\n      \"film_name\": \"Toy Story\"\n    }\n  }\n  {\n    api_name: \"getGameArt\",\n    parameters: {\n      \"game\": \"Toy Story\""}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getAnimationInfo', 'api_description': 'Retrieve information about a specific animation', 'field': 'Entertainment/Animation', 'parameters': {'animation_name': {'type': 'str', 'description': 'The name of the animation you want to get information about (e.g., My Neighbor Totoro, Spirited Away, Toy Story)'}, 'release_year': {'type': 'int', 'description': 'The release year of the animation (e.g., 2001, 1995, 1988)'}}, 'required': ['animation_name'], 'responses': {'animation_name': {'type': 'str', 'description': 'The name of the animation'}, 'release_year': {'type': 'int', 'description': 'The release year of the animation'}, 'director': {'type': 'str', 'description': 'The director of the animation'}, 'genre': {'type': 'str', 'description': 'The genre of the animation'}, 'rating': {'type': 'float', 'description': 'The rating of the animation'}}}, {'api_name': 'getAnimationDetails', 'api_description': 'Retrieve details of an animation', 'field': 'Entertainment/Animation', 'parameters': {'animation_title': {'type': 'str', 'description': 'The title of the animation (e.g., Frozen, Toy Story, Spirited Away)'}}, 'required': ['animation_title'], 'responses': {'title': {'type': 'str', 'description': 'The title of the animation'}, 'director': {'type': 'str', 'description': 'The director of the animation'}, 'genre': {'type': 'str', 'description': 'The genre of the animation'}, 'release_year': {'type': 'int', 'description': 'The year the animation was released'}, 'rating': {'type': 'float', 'description': 'The rating of the animation (out of 10)'}}}, {'api_name': 'createGif', 'api_description': 'Create a custom GIF animation', 'field': 'Graphic Design/GIF Design', 'parameters': {'frames': {'type': 'int', 'description': 'Number of frames in the GIF animation (e.g., 10, 20, 30)'}, 'duration': {'type': 'int', 'description': 'Duration of each frame in milliseconds (e.g., 100, 200, 300)'}, 'size': {'type': 'str', 'description': 'Dimensions of the GIF animation (e.g., 500x500, 800x600)'}, 'colors': {'type': 'int', 'description': 'Number of colors in the GIF palette (e.g., 16, 256, 1024)'}}, 'required': ['frames', 'duration', 'size'], 'responses': {'gif_url': {'type': 'str', 'description': 'URL to download the created GIF animation'}}}, {'api_name': 'getGameArt', 'api_description': 'Retrieve game art and animations', 'field': 'Gaming/Game art and animation', 'parameters': {'game': {'type': 'str', 'description': 'The name of the game to retrieve the art and animations for'}}, 'required': ['game'], 'responses': {'art': {'type': 'str', 'description': 'The URL or file path for the game art and animations'}}}, {'api_name': 'getFilmInfo', 'api_description': 'Retrieve information about a film', 'field': 'Entertainment/Film', 'parameters': {'film_name': {'type': 'str', 'description': 'The name of the film you want information about'}}, 'required': ['film_name'], 'responses': {'title': {'type': 'str', 'description': 'The title of the film'}, 'release_year': {'type': 'int', 'description': 'The year the film was released'}, 'director': {'type': 'str', 'description': \"The name of the film's director\"}, 'actors': {'type': 'str', 'description': 'The actors starring in the film'}, 'plot': {'type': 'str', 'description': \"A brief summary of the film's plot\"}}}]\ntask_instruction = \"Tell me more about the animation titled \"Frozen\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getAnimationDetails', 'parameters': {'animation_title': 'Frozen'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2', 'API_call_3', 'API_call_4']}]", "predict": "\nI need to call the \"getAnimationDetails\" API to retrieve information about the animation titled \"Frozen\". The API call is made with the argument \"animation_title\" set to \"Frozen\". This will allow me to gather specific details about the animation, such as its release year, director, genre, and rating. By obtaining this information, I will be able to provide a more comprehensive answer to the user's query.\nAction: getAnimationDetails\nAction Input: {\n  \"animation_title\": \"Frozen\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getGameScore', 'api_description': 'Retrieve the current score of a gaming match', 'field': 'Entertainment/Gaming', 'parameters': {'game_name': {'type': 'str', 'description': 'The name of the game for which you want to get the score (e.g., FIFA 21, Call of Duty, Minecraft)'}, 'player_name': {'type': 'str', 'description': 'The name of the player for whom you want to get the score'}}, 'required': ['game_name', 'player_name'], 'responses': {'score': {'type': 'int', 'description': 'The current score of the player in the specified game'}}}, {'api_name': 'getHighScore', 'api_description': 'Retrieve the high score of a player in a Match-3 game', 'field': 'Gaming/Match-3 games', 'parameters': {'player_id': {'type': 'str', 'description': 'The unique identifier of the player'}, 'game_id': {'type': 'str', 'description': 'The unique identifier of the Match-3 game'}}, 'required': ['player_id', 'game_id'], 'responses': {'high_score': {'type': 'int', 'description': 'The high score achieved by the player in the specified Match-3 game'}}}, {'api_name': 'getGolfScore', 'api_description': 'Retrieve the score for a specific golf game', 'field': 'Sports/Golf', 'parameters': {'game_id': {'type': 'int', 'description': 'The unique identifier of the golf game'}, 'player_name': {'type': 'str', 'description': 'The name of the player for which you want to retrieve the score'}, 'date': {'type': 'str', 'description': 'The date of the golf game (e.g., DD/MM/YYYY)'}}, 'required': ['game_id', 'player_name'], 'responses': {'score': {'type': 'int', 'description': 'The score of the player in the specified golf game'}}}, {'api_name': 'getCurrentGame', 'api_description': 'Retrieve current game information', 'field': 'Gaming/Browser-based games', 'parameters': {'game_type': {'type': 'str', 'description': 'The type of game to retrieve information for (e.g., puzzle, strategy, action)'}, 'player_name': {'type': 'str', 'description': 'The name of the player for which to retrieve game information'}}, 'required': ['player_name'], 'responses': {'game_name': {'type': 'str', 'description': 'The name of the current game being played'}, 'game_score': {'type': 'int', 'description': 'The score of the current game'}, 'game_status': {'type': 'str', 'description': 'The status of the current game (e.g., in progress, completed)'}}}, {'api_name': 'getGamePayoff', 'api_description': 'Retrieve payoff of a player in a specific game', 'field': 'Mathematics/Game Theory', 'parameters': {'game': {'type': 'str', 'description': \"The name of the game for which you want to get the payoff (e.g., Prisoner's Dilemma, Battle of the Sexes)\"}}, 'required': ['game'], 'responses': {'payoff': {'type': 'float', 'description': 'The payoff of the player in the specified game'}}}]\ntask_instruction = \"Retrieve the game score of Emily in \"Call of Duty\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getGameScore', 'parameters': {'game_name': 'Call of Duty', 'player_name': 'Emily'}, 'responses': ['API_call_0']}]", "predict": "\n\nAction: getGameScore\nAction Input: {\n  \"game_name\": \"Call of Duty\",\n  \"player_name\": \"Emily\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getVirtualRealityGame', 'api_description': 'Retrieve a virtual reality game for entertainment', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the virtual reality game (e.g., action, adventure, puzzle)'}, 'player_count': {'type': 'int', 'description': 'The number of players the game can support', 'example': '4'}}, 'required': ['genre'], 'responses': {'game_name': {'type': 'str', 'description': 'The name of the virtual reality game'}, 'player_count': {'type': 'int', 'description': 'The maximum number of players the game can support'}}}, {'api_name': 'getVRGame', 'api_description': 'Retrieve a virtual reality game', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the game you want to retrieve (e.g., action, adventure, puzzle)'}, 'platform': {'type': 'str', 'description': 'The platform on which you want to play the game (e.g., PC, PlayStation, Oculus Quest)'}, 'player_count': {'type': 'int', 'description': 'The number of players the game should support'}}, 'required': ['genre', 'platform'], 'responses': {'game_title': {'type': 'str', 'description': 'The title of the virtual reality game'}, 'release_date': {'type': 'str', 'description': 'The release date of the game'}, 'price': {'type': 'float', 'description': 'The price of the game in USD'}}}, {'api_name': 'getVRMovie', 'api_description': 'Retrieve a virtual reality movie', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the movie you want to retrieve (e.g., action, thriller, horror)'}, 'length': {'type': 'int', 'description': 'The desired length of the movie in minutes'}}, 'required': ['genre'], 'responses': {'movie_title': {'type': 'str', 'description': 'The title of the virtual reality movie'}, 'release_date': {'type': 'str', 'description': 'The release date of the movie'}, 'director': {'type': 'str', 'description': 'The director of the movie'}}}, {'api_name': 'createVRApplication', 'api_description': 'Create a new virtual reality application', 'field': 'Mobile Development/Virtual Reality Development', 'parameters': {'name': {'type': 'str', 'description': 'The name of the virtual reality application'}, 'platform': {'type': 'str', 'description': 'The platform for which the application is developed (e.g., Oculus, HTC Vive, Google Cardboard)'}, 'genre': {'type': 'str', 'description': 'The genre/category of the application (e.g., game, education, simulation)'}, 'target_audience': {'type': 'str', 'description': 'The target audience for the application (e.g., kids, adults)'}, 'supported_devices': {'type': 'str', 'description': 'The list of devices supported by the application (e.g., Samsung Gear VR, PlayStation VR)'}, 'price': {'type': 'float', 'description': 'The price of the application in USD'}}, 'required': ['name', 'platform'], 'responses': {'application_id': {'type': 'int', 'description': 'The unique ID assigned to the created application'}, 'message': {'type': 'str', 'description': 'Success message indicating the application creation status'}}}, {'api_name': 'createVRApp', 'api_description': 'Create a virtual reality application', 'field': 'Mobile Development/Virtual Reality Development', 'parameters': {'app_name': {'type': 'str', 'description': 'The name of the virtual reality application'}, 'platform': {'type': 'str', 'description': 'The platform for which the application is being developed (e.g., Android, iOS)'}, 'hardware_requirements': {'type': 'str', 'description': 'The hardware requirements for the application (e.g., VR headset, motion controllers)'}, 'programming_language': {'type': 'str', 'description': 'The programming language to be used for development (e.g., Unity, Unreal Engine)'}}, 'required': ['app_name', 'platform'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the virtual reality application was successfully created'}}}]\ntask_instruction = \"Find a virtual reality game in the action genre.\"\nOutput:\n [/INST]", "label": "[{'api': 'getVirtualRealityGame', 'parameters': {'genre': 'action'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\n\nAction: getVRGame\nAction Input: {\n  \"genre\": \"action\",\n  \"platform\": \"PC\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'playGame', 'api_description': 'Play a browser-based game', 'field': 'Gaming/Browser-based games', 'parameters': {'game_type': {'type': 'str', 'description': 'The type of game to play (e.g., puzzle, strategy, action)'}, 'difficulty_level': {'type': 'str', 'description': 'The desired difficulty level of the game (e.g., easy, medium, hard)'}, 'player_name': {'type': 'str', 'description': 'The name of the player who wants to play the game'}}, 'required': ['game_type', 'player_name'], 'responses': {'game_url': {'type': 'str', 'description': 'The URL of the game to be played'}, 'game_instructions': {'type': 'str', 'description': 'The instructions for playing the game'}}}, {'api_name': 'getVirtualRealityGame', 'api_description': 'Retrieve a virtual reality game for entertainment', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the virtual reality game (e.g., action, adventure, puzzle)'}, 'player_count': {'type': 'int', 'description': 'The number of players the game can support', 'example': '4'}}, 'required': ['genre'], 'responses': {'game_name': {'type': 'str', 'description': 'The name of the virtual reality game'}, 'player_count': {'type': 'int', 'description': 'The maximum number of players the game can support'}}}, {'api_name': 'getVRGame', 'api_description': 'Retrieve a virtual reality game', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the game you want to retrieve (e.g., action, adventure, puzzle)'}, 'platform': {'type': 'str', 'description': 'The platform on which you want to play the game (e.g., PC, PlayStation, Oculus Quest)'}, 'player_count': {'type': 'int', 'description': 'The number of players the game should support'}}, 'required': ['genre', 'platform'], 'responses': {'game_title': {'type': 'str', 'description': 'The title of the virtual reality game'}, 'release_date': {'type': 'str', 'description': 'The release date of the game'}, 'price': {'type': 'float', 'description': 'The price of the game in USD'}}}, {'api_name': 'getPuzzleGame', 'api_description': 'Retrieve information about a puzzle game', 'field': 'Gaming/Puzzle games', 'parameters': {'game_name': {'type': 'str', 'description': \"The name of the puzzle game you want to retrieve information about (e.g., Sudoku, Tetris, Rubik's Cube)\"}, 'difficulty_level': {'type': 'str', 'description': 'Specify the difficulty level of the puzzle game (e.g., easy, medium, hard)'}, 'player_mode': {'type': 'str', 'description': 'Specify the player mode for the puzzle game (e.g., single player, multiplayer)'}, 'platform': {'type': 'str', 'description': 'Specify the platform on which the puzzle game is available (e.g., PC, mobile, console)'}}, 'required': ['game_name'], 'responses': {'name': {'type': 'str', 'description': 'The name of the puzzle game'}, 'difficulty_level': {'type': 'str', 'description': 'The difficulty level of the puzzle game'}, 'player_mode': {'type': 'str', 'description': 'The player mode for the puzzle game'}, 'platform': {'type': 'str', 'description': 'The platform on which the puzzle game is available'}}}, {'api_name': 'recommendGameToPlayer', 'api_description': 'Recommends a game to a player based on their gaming preferences', 'field': 'Gaming/Game psychology', 'parameters': {'player_id': {'type': 'str', 'description': 'The unique identifier of the player'}}, 'required': ['player_id'], 'responses': {'recommended_game': {'type': 'str', 'description': 'The recommended game for the player based on their gaming preferences'}}}]\ntask_instruction = \"Find me a PC game in the action genre.\"\nOutput:\n [/INST]", "label": "[{'api': 'getVRGame', 'parameters': {'genre': 'action', 'platform': 'PC'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: getVRGame\nAction Input: {\n  \"genre\": \"action\",\n  \"platform\": \"PC\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getVRMovie', 'api_description': 'Retrieve a virtual reality movie', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the movie you want to retrieve (e.g., action, thriller, horror)'}, 'length': {'type': 'int', 'description': 'The desired length of the movie in minutes'}}, 'required': ['genre'], 'responses': {'movie_title': {'type': 'str', 'description': 'The title of the virtual reality movie'}, 'release_date': {'type': 'str', 'description': 'The release date of the movie'}, 'director': {'type': 'str', 'description': 'The director of the movie'}}}, {'api_name': 'recommendMovie', 'api_description': 'Recommends a movie based on user preferences and previous movie ratings', 'field': 'Computer Science/Artificial Intelligence', 'parameters': {'user_preferences': {'type': 'str', 'description': 'User preferences for movie recommendation'}, 'previous_ratings': {'type': 'str', 'description': 'Previous movie ratings by the user'}}, 'required': ['user_preferences', 'previous_ratings'], 'responses': {'movie': {'type': 'str', 'description': 'The recommended movie'}}}, {'api_name': 'createHorrorStory', 'api_description': 'Generate a horror story', 'field': 'Creative Writing/Horror Writing', 'parameters': {'length': {'type': 'int', 'description': 'The desired length of the horror story in words (e.g., 500, 1000, 2000)'}, 'characters': {'type': 'int', 'description': 'The number of characters to include in the horror story (e.g., 2, 5, 10)'}, 'setting': {'type': 'str', 'description': 'The setting for the horror story (e.g., abandoned house, dark forest, haunted castle)'}, 'theme': {'type': 'str', 'description': 'The main theme or concept of the horror story (e.g., supernatural, psychological, creature)'}}, 'required': ['length'], 'responses': {'story': {'type': 'str', 'description': 'The generated horror story'}}}, {'api_name': 'getVirtualRealityGame', 'api_description': 'Retrieve a virtual reality game for entertainment', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the virtual reality game (e.g., action, adventure, puzzle)'}, 'player_count': {'type': 'int', 'description': 'The number of players the game can support', 'example': '4'}}, 'required': ['genre'], 'responses': {'game_name': {'type': 'str', 'description': 'The name of the virtual reality game'}, 'player_count': {'type': 'int', 'description': 'The maximum number of players the game can support'}}}, {'api_name': 'generateThrillerPlot', 'api_description': 'Generate a thriller plot for a story', 'field': 'Creative Writing/Thriller Writing', 'parameters': {'protagonist': {'type': 'str', 'description': 'The name of the main character of the story'}, 'antagonist': {'type': 'str', 'description': 'The name of the main villain or adversary in the story'}, 'setting': {'type': 'str', 'description': 'The location or environment where the story takes place'}, 'twist': {'type': 'bool', 'description': 'Whether to include a plot twist in the story'}}, 'required': ['protagonist', 'antagonist'], 'responses': {'thriller_plot': {'type': 'str', 'description': 'The generated thriller plot for the story'}}}]\ntask_instruction = \"Find a thriller movie in virtual reality.\"\nOutput:\n [/INST]", "label": "[{'api': 'getVRMovie', 'parameters': {'genre': 'thriller'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\nAction: recommendMovie\nAction Input: {\n  \"user_preferences\": \"thriller\",\n  \"previous_ratings\": \"\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getVRConcert', 'api_description': 'Retrieve a virtual reality concert', 'field': 'Entertainment/Virtual Reality', 'parameters': {'artist': {'type': 'str', 'description': 'The artist or band you want to watch in a virtual reality concert'}, 'genre': {'type': 'str', 'description': 'The genre of music you prefer (e.g., pop, rock, hip-hop)'}, 'location': {'type': 'str', 'description': 'The location of the concert (e.g., Los Angeles, New York, London)'}}, 'required': ['artist', 'genre'], 'responses': {'concert_title': {'type': 'str', 'description': 'The title of the virtual reality concert'}, 'date': {'type': 'str', 'description': 'The date of the concert'}, 'duration': {'type': 'int', 'description': 'The duration of the concert in minutes'}}}, {'api_name': 'getVRMovie', 'api_description': 'Retrieve a virtual reality movie', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the movie you want to retrieve (e.g., action, thriller, horror)'}, 'length': {'type': 'int', 'description': 'The desired length of the movie in minutes'}}, 'required': ['genre'], 'responses': {'movie_title': {'type': 'str', 'description': 'The title of the virtual reality movie'}, 'release_date': {'type': 'str', 'description': 'The release date of the movie'}, 'director': {'type': 'str', 'description': 'The director of the movie'}}}, {'api_name': 'getMusicPerformance', 'api_description': 'Retrieve information about a music performance', 'field': 'Music/Music performance', 'parameters': {'artist': {'type': 'str', 'description': 'The name of the artist or band (e.g., Taylor Swift, Coldplay)'}, 'location': {'type': 'str', 'description': 'The location of the music performance (e.g., New York, London)'}, 'date': {'type': 'str', 'description': 'The date of the music performance (e.g., 2022-12-31)'}, 'time': {'type': 'str', 'description': 'The time of the music performance (e.g., 20:00)'}, 'ticket_type': {'type': 'str', 'description': 'The type of ticket (e.g., VIP, General Admission)'}}, 'required': ['artist', 'location'], 'responses': {'performance_info': {'type': 'str', 'description': 'Information about the music performance'}, 'ticket_availability': {'type': 'bool', 'description': 'Indicates whether tickets are available or not'}}}, {'api_name': 'getVirtualRealityGame', 'api_description': 'Retrieve a virtual reality game for entertainment', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the virtual reality game (e.g., action, adventure, puzzle)'}, 'player_count': {'type': 'int', 'description': 'The number of players the game can support', 'example': '4'}}, 'required': ['genre'], 'responses': {'game_name': {'type': 'str', 'description': 'The name of the virtual reality game'}, 'player_count': {'type': 'int', 'description': 'The maximum number of players the game can support'}}}, {'api_name': 'getVRGame', 'api_description': 'Retrieve a virtual reality game', 'field': 'Entertainment/Virtual Reality', 'parameters': {'genre': {'type': 'str', 'description': 'The genre of the game you want to retrieve (e.g., action, adventure, puzzle)'}, 'platform': {'type': 'str', 'description': 'The platform on which you want to play the game (e.g., PC, PlayStation, Oculus Quest)'}, 'player_count': {'type': 'int', 'description': 'The number of players the game should support'}}, 'required': ['genre', 'platform'], 'responses': {'game_title': {'type': 'str', 'description': 'The title of the virtual reality game'}, 'release_date': {'type': 'str', 'description': 'The release date of the game'}, 'price': {'type': 'float', 'description': 'The price of the game in USD'}}}]\ntask_instruction = \"Find and get information about a Coldplay virtual reality concert in Los Angeles.\"\nOutput:\n [/INST]", "label": "[{'api': 'getVRConcert', 'parameters': {'artist': 'Coldplay', 'genre': '192.168.142.177', 'location': 'Los Angeles'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2']}]", "predict": "\nPlease choose the needed API and return the API calling list according to the task instruction.\nAction: getVRConcert\nAction Input: {\n  \"artist\": \"Coldplay\",\n  \"genre\": \"Music/Music performance\",\n  \"location\": \"Los Angeles\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getRecipe', 'api_description': 'Retrieve recipe information based on cuisine type and ingredients', 'field': 'Entertainment/Culinary Arts', 'parameters': {'cuisine_type': {'type': 'str', 'description': 'Specify the cuisine type for the recipe (e.g., Italian, Chinese, Mexican)'}, 'ingredients': {'type': 'str', 'description': 'Provide a list of ingredients for the recipe (e.g., chicken, onions, tomatoes)'}}, 'required': ['cuisine_type'], 'responses': {'recipe_name': {'type': 'str', 'description': 'The name of the recipe'}, 'ingredients_needed': {'type': 'str', 'description': 'The list of ingredients needed for the recipe'}, 'instructions': {'type': 'str', 'description': 'Step-by-step instructions to prepare the recipe'}}}, {'api_name': 'createRecipe', 'api_description': 'Create a new recipe', 'field': 'Food and Beverage/Recipe development', 'parameters': {'recipe_name': {'type': 'str', 'description': 'The name of the recipe'}, 'ingredients': {'type': 'str', 'description': 'The list of ingredients required for the recipe (e.g., flour, sugar, eggs, milk)'}, 'instructions': {'type': 'str', 'description': 'The step-by-step instructions to prepare the recipe'}}, 'required': ['recipe_name', 'ingredients', 'instructions'], 'responses': {'status': {'type': 'str', 'description': 'The status of the recipe creation'}}}, {'api_name': 'updateRecipe', 'api_description': 'Update an existing recipe', 'field': 'Culinary Arts/Culinary Management', 'parameters': {'recipe_id': {'type': 'int', 'description': 'The ID of the recipe to update'}, 'name': {'type': 'str', 'description': 'The updated name of the recipe'}, 'ingredients': {'type': 'str', 'description': 'The updated list of ingredients required for the recipe'}, 'instructions': {'type': 'str', 'description': 'The updated step-by-step instructions to prepare the recipe'}}, 'required': ['recipe_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the recipe was successfully updated'}}}, {'api_name': 'getCuisineRecommendation', 'api_description': 'Retrieve recommended cuisine for a specific destination', 'field': 'Travel and Tourism/Culinary Tourism', 'parameters': {'destination': {'type': 'str', 'description': 'The desired travel destination (e.g., Paris, Bangkok, Rome)'}}, 'required': ['destination'], 'responses': {'cuisine': {'type': 'str', 'description': 'The recommended cuisine for the specified destination'}}}, {'api_name': 'findSubstituteIngredients', 'api_description': 'Find substitute ingredients for a particular food item', 'field': 'Food and Beverage/Food technology', 'parameters': {'food_item': {'type': 'str', 'description': 'The name of the food item for which you want to find substitute ingredients (e.g., butter, sugar, flour)'}}, 'required': ['food_item'], 'responses': {'substitute_ingredients': {'type': 'str', 'description': 'A list of substitute ingredients that can replace the specified food item'}}}]\ntask_instruction = \"Find a recipe for the cuisine type \"192.168.233.147\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getRecipe', 'parameters': {'cuisine_type': '192.168.233.147'}, 'responses': ['API_call_0', 'API_call_1', 'API_call_2']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nI will call the function \"getRecipe\" with the arguments:\n- cuisine_type: \"192.168.233.147\"\n\nThis API call is made to retrieve a recipe for the specified cuisine type. By providing the cuisine type, I can narrow down the search to find a recipe that matches the desired cuisine.\nAction: getRecipe\nAction Input: {\n  \"cuisine_type\": \"192.168.233.147\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getSocialMediaInfluence', 'api_description': 'Retrieve social media influence information', 'field': 'Entertainment/Social Media Influence', 'parameters': {'platform': {'type': 'str', 'description': 'The platform for which you want to get the social media influence (e.g., Instagram, Twitter, TikTok)'}, 'username': {'type': 'str', 'description': 'The username of the account for which you want to get the social media influence'}}, 'required': ['platform', 'username'], 'responses': {'followers': {'type': 'int', 'description': 'The number of followers the account has on the specified platform'}, 'engagement_rate': {'type': 'float', 'description': 'The engagement rate of the account on the specified platform'}}}, {'api_name': 'getInfluencerDetails', 'api_description': 'Retrieve details of an influencer', 'field': 'Public Relations/Influencer Relations', 'parameters': {'influencer_id': {'type': 'str', 'description': 'The unique identifier of the influencer (e.g., ABC123)'}, 'platform': {'type': 'str', 'description': 'The platform on which the influencer is active (e.g., Instagram, YouTube, Twitter)'}, 'audience': {'type': 'str', 'description': 'The target audience of the influencer (e.g., teenagers, moms, fitness enthusiasts)'}}, 'required': ['influencer_id'], 'responses': {'name': {'type': 'str', 'description': 'The name of the influencer'}, 'followers': {'type': 'int', 'description': 'The number of followers the influencer has'}, 'engagement_rate': {'type': 'float', 'description': \"The engagement rate of the influencer's audience\"}}}, {'api_name': 'getMediaEffects', 'api_description': 'Retrieve media effects information', 'field': 'Media/Media Effects', 'parameters': {'media_type': {'type': 'str', 'description': 'The type of media (e.g., movie, TV show, music video)'}, 'genre': {'type': 'str', 'description': 'The genre of the media (e.g., comedy, action, romance)'}, 'duration': {'type': 'int', 'description': 'The duration of the media in minutes'}, 'release_year': {'type': 'int', 'description': 'The year the media was released'}}, 'required': ['media_type'], 'responses': {'effects': {'type': 'str', 'description': 'The special effects used in the media'}, 'genre': {'type': 'str', 'description': 'The genre of the media'}, 'rating': {'type': 'float', 'description': 'The rating of the media (out of 10)'}}}, {'api_name': 'getMusicInfluence', 'api_description': 'Retrieve the influence of a music track on society', 'field': 'Sociology/Sociology of Music', 'parameters': {'track_name': {'type': 'str', 'description': 'The name of the music track'}, 'artist_name': {'type': 'str', 'description': 'The name of the artist or band for the music track'}}, 'required': ['track_name'], 'responses': {'influence': {'type': 'str', 'description': 'The influence of the music track on society'}}}, {'api_name': 'deleteSocialMediaMessage', 'api_description': 'Delete a social media message', 'field': 'Customer Service/Social Media Support', 'parameters': {'message_id': {'type': 'str', 'description': 'The ID of the social media message to delete'}}, 'required': ['message_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the message was successfully deleted'}}}]\ntask_instruction = \"Tell me the social media influence of the Twitter user \"emilywilson987\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getSocialMediaInfluence', 'parameters': {'platform': 'Twitter', 'username': 'emilywilson987'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'verifyHash', 'api_description': 'Check if the input data matches the provided hash value to verify data integrity and authenticity', 'field': 'Cybersecurity/Data Security', 'parameters': {'data': {'type': 'str', 'description': 'The data to be verified'}, 'hash_algorithm': {'type': 'str', 'description': 'The algorithm used for hashing (e.g., SHA-256, MD5)'}, 'hash_value': {'type': 'str', 'description': 'The hash value to be compared with the generated hash of the data'}}, 'required': ['data', 'hash_algorithm', 'hash_value'], 'responses': {'verification_status': {'type': 'bool', 'description': 'True if the hash value matches the generated hash of the data, False otherwise'}}}, {'api_name': 'hash', 'api_description': 'Calculates a hash value of a given input message using a specified cryptographic hash function', 'field': 'Computer Science/Cryptography', 'parameters': {'message': {'type': 'str', 'description': 'The message for which the hash value needs to be calculated'}, 'hash_function': {'type': 'str', 'description': 'The cryptographic hash function to be used for hashing (e.g., SHA-256, MD5)'}}, 'required': ['message', 'hash_function'], 'responses': {'hash_value': {'type': 'str', 'description': 'The calculated hash value of the input message'}}}, {'api_name': 'hashData', 'api_description': 'Hash a piece of data', 'field': 'Technology/Internet Security', 'parameters': {'data': {'type': 'str', 'description': 'The data to be hashed'}, 'hash_algorithm': {'type': 'str', 'description': 'The hashing algorithm to be used (e.g., MD5, SHA-256)'}}, 'required': ['data'], 'responses': {'hashed_data': {'type': 'str', 'description': 'The hashed data'}}}, {'api_name': 'getTransactionHash', 'api_description': 'Get the hash value of a blockchain transaction', 'field': 'Blockchain/Blockchain Security', 'parameters': {'transaction_id': {'type': 'str', 'description': 'The ID of the transaction for which you want to retrieve the hash value'}, 'blockchain_network': {'type': 'str', 'description': 'The blockchain network where the transaction belongs'}}, 'required': ['transaction_id', 'blockchain_network'], 'responses': {'transaction_hash': {'type': 'str', 'description': 'The hash value of the specified transaction'}}}, {'api_name': 'calculateBlockHash', 'api_description': 'Calculate the hash of a block in the blockchain', 'field': 'Blockchain/Blockchain Security', 'parameters': {'block_data': {'type': 'str', 'description': 'The data of the block for which the hash needs to be calculated'}}, 'required': ['block_data'], 'responses': {'block_hash': {'type': 'str', 'description': 'The hash of the specified block'}}}]\ntask_instruction = \"Please verify the MD5 hash value of the data \"25 years old\" which is \"ijkl9012\".\"\nOutput:\n [/INST]", "label": "[{'api': 'verifyHash', 'parameters': {'data': '25 years old', 'hash_algorithm': 'MD5', 'hash_value': 'ijkl9012'}, 'responses': ['API_call_0']}]", "predict": "\n\nPlease verify the MD5 hash value of the data \"25 years old\" which is \"ijkl9012\".\nAction: hashData\nAction Input: {\n  \"data\": \"25 years old\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'generateKeyPair', 'api_description': 'Generate a public-private key pair using a specified key generation algorithm', 'field': 'Cybersecurity/Data Security', 'parameters': {'key_algorithm': {'type': 'str', 'description': 'The algorithm to be used for generating the key pair (e.g., RSA, ECC)'}, 'key_length': {'type': 'int', 'description': 'The desired length of the key pair in bits (e.g., 2048, 4096)'}}, 'required': ['key_algorithm', 'key_length'], 'responses': {'public_key': {'type': 'str', 'description': 'The generated public key'}, 'private_key': {'type': 'str', 'description': 'The generated private key'}}}, {'api_name': 'computeCombination', 'api_description': 'Compute the combination of two numbers', 'field': 'Mathematics/Discrete Mathematics', 'parameters': {'number1': {'type': 'int', 'description': 'The first number for combination calculation'}, 'number2': {'type': 'int', 'description': 'The second number for combination calculation'}}, 'required': ['number1', 'number2'], 'responses': {'combination': {'type': 'int', 'description': 'The combination of the two numbers provided'}}}, {'api_name': 'alignSequence', 'api_description': 'Align two gene sequences', 'field': 'Computer Science/Bioinformatics', 'parameters': {'sequence1': {'type': 'str', 'description': 'The first gene sequence to align'}, 'sequence2': {'type': 'str', 'description': 'The second gene sequence to align'}, 'algorithm': {'type': 'str', 'description': 'The alignment algorithm to use (e.g., Needleman-Wunsch, Smith-Waterman)'}, 'gap_penalty': {'type': 'float', 'description': 'The penalty for introducing a gap in the alignment (e.g., -1.0, -0.5)'}, 'match_score': {'type': 'float', 'description': 'The score for a match between nucleotides (e.g., 1.0, 0.5)'}, 'mismatch_penalty': {'type': 'float', 'description': 'The penalty for a mismatch between nucleotides (e.g., -1.0, -0.5)'}}, 'required': ['sequence1', 'sequence2'], 'responses': {'alignment': {'type': 'str', 'description': 'The aligned gene sequences'}, 'score': {'type': 'float', 'description': 'The alignment score'}}}, {'api_name': 'generateOTP', 'api_description': 'Generate a one-time password (OTP)', 'field': 'Technology/Computer Security', 'parameters': {'length': {'type': 'int', 'description': 'The length of the OTP'}, 'validity': {'type': 'int', 'description': 'The validity period of the OTP in minutes'}}, 'required': ['length', 'validity'], 'responses': {'otp': {'type': 'str', 'description': 'The generated OTP'}}}, {'api_name': 'generateRandomPassword', 'api_description': 'Generate a random password with specified length and complexity', 'field': 'Technology/Cybersecurity', 'parameters': {'length': {'type': 'int', 'description': 'The length of the password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the password (e.g., Low, Medium, High)'}}, 'required': ['length'], 'responses': {'password': {'type': 'str', 'description': 'The generated random password'}}}]\ntask_instruction = \"Generate a key pair using the RSA algorithm with a key length of 18.\"\nOutput:\n [/INST]", "label": "[{'api': 'generateKeyPair', 'parameters': {'key_algorithm': 'RSA', 'key_length': '18'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "\n Please choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: generateKeyPair\nAction Input: {\n  \"api_name\": \"generateKeyPair\",\n  \"api_description\": \"Generate a key pair using the RSA algorithm with a key length of 18.\",\n  \"field\": \"Cybersecurity/Data Security\",\n  \"parameters\": {\n    \"key_algorithm\": \"RSA\",\n    \"key_length\": 18\n  }\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkAccountSecurity', 'api_description': \"Check the security status of a user's account\", 'field': 'E-commerce/E-commerce security and privacy', 'parameters': {'user_id': {'type': 'str', 'description': \"The ID of the user's account to check security\"}}, 'required': ['user_id'], 'responses': {'security_status': {'type': 'str', 'description': \"The security status of the user's account (e.g., secure, compromised)\"}}}, {'api_name': 'checkSecurityStatus', 'api_description': 'Check the security status of a cloud environment', 'field': 'Cybersecurity/Cloud Security', 'parameters': {'cloud_provider': {'type': 'str', 'description': 'The cloud provider you want to check (e.g., AWS, Azure, GCP)'}, 'account_id': {'type': 'str', 'description': 'The ID of the cloud account'}, 'region': {'type': 'str', 'description': 'The region where the cloud resources are located'}}, 'required': ['cloud_provider', 'account_id'], 'responses': {'status': {'type': 'str', 'description': 'The security status of the cloud environment (e.g., secure, at risk)'}}}, {'api_name': 'checkWirelessNetwork', 'api_description': 'Check the security status of a wireless network', 'field': 'Cybersecurity/Wireless Security', 'parameters': {'network_name': {'type': 'str', 'description': 'The name of the wireless network to be checked'}, 'password': {'type': 'str', 'description': 'The password for the wireless network'}, 'scan_duration': {'type': 'int', 'description': 'The duration (in seconds) for scanning the wireless network'}}, 'required': ['network_name', 'password'], 'responses': {'security_status': {'type': 'str', 'description': 'The security status of the wireless network'}, 'vulnerabilities': {'type': 'str', 'description': 'Any vulnerabilities detected in the wireless network'}}}, {'api_name': 'checkWebsiteSecurity', 'api_description': 'Check the security of a website', 'field': 'Technology/Internet Security', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the website to check'}}, 'required': ['website_url'], 'responses': {'security_score': {'type': 'float', 'description': 'The security score of the website'}}}, {'api_name': 'checkPassengerSecurity', 'api_description': 'Check the security status of a passenger', 'field': 'Aviation/Aviation Security', 'parameters': {'passenger_name': {'type': 'str', 'description': 'The name of the passenger to be checked'}, 'flight_number': {'type': 'str', 'description': 'The flight number for which the security check is to be performed'}, 'airport_code': {'type': 'str', 'description': 'The code of the airport where the security check is taking place'}, 'security_level': {'type': 'str', 'description': 'The desired security level (e.g., high, medium, low)'}}, 'required': ['passenger_name'], 'responses': {'security_status': {'type': 'str', 'description': 'The security status of the passenger (e.g., cleared, pending, denied)'}, 'security_level': {'type': 'str', 'description': 'The security level assigned to the passenger'}}}]\ntask_instruction = \"Check the security status of the account with the cloud provider 'Vq9Q8VOq4b' and the account ID '2U7obHp7T4P'.\"\nOutput:\n [/INST]", "label": "[{'api': 'checkSecurityStatus', 'parameters': {'cloud_provider': 'Vq9Q8VOq4b', 'account_id': '2U7obHp7T4P'}, 'responses': ['API_call_0']}]", "predict": "\nPlease choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: checkSecurityStatus\nAction Input: {\n  \"cloud_provider\": \"Vq9Q8VOq4b\",\n  \"account_id\": \"2U7obHp7T4P\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkAuthentication', 'api_description': 'Check the authentication status of a user', 'field': 'Cybersecurity/Application Security', 'parameters': {'username': {'type': 'str', 'description': 'The username of the user to check authentication'}, 'password': {'type': 'str', 'description': 'The password of the user for authentication'}}, 'required': ['username', 'password'], 'responses': {'authenticated': {'type': 'bool', 'description': 'True if the user is authenticated, False otherwise'}}}, {'api_name': 'checkUserCredentials', 'api_description': 'Check the credentials of a user for authentication', 'field': 'E-commerce/E-commerce security and privacy', 'parameters': {'username': {'type': 'str', 'description': 'The username of the user for authentication'}, 'password': {'type': 'str', 'description': 'The password of the user for authentication'}}, 'required': ['username', 'password'], 'responses': {'status': {'type': 'bool', 'description': 'Indicates whether the user credentials are valid or not'}}}, {'api_name': 'validatePassword', 'api_description': 'Check if a password meets certain criteria', 'field': 'Information Technology/Front-end Development', 'parameters': {'password': {'type': 'str', 'description': 'The password to be validated'}, 'min_length': {'type': 'int', 'description': 'The minimum length of the password', 'default': 8}, 'require_special_char': {'type': 'bool', 'description': 'Whether the password should contain a special character', 'default': False}}, 'required': ['password'], 'responses': {'valid': {'type': 'bool', 'description': 'True if the password meets the criteria, False otherwise'}}}, {'api_name': 'checkLogin', 'api_description': 'Check if the user login credentials are valid', 'field': 'Technology/Internet Security', 'parameters': {'username': {'type': 'str', 'description': 'The username for login'}, 'password': {'type': 'str', 'description': 'The password for login'}}, 'required': ['username', 'password'], 'responses': {'valid': {'type': 'bool', 'description': 'Indicates if the login credentials are valid'}}}, {'api_name': 'checkAccountSecurity', 'api_description': \"Check the security status of a user's account\", 'field': 'E-commerce/E-commerce security and privacy', 'parameters': {'user_id': {'type': 'str', 'description': \"The ID of the user's account to check security\"}}, 'required': ['user_id'], 'responses': {'security_status': {'type': 'str', 'description': \"The security status of the user's account (e.g., secure, compromised)\"}}}]\ntask_instruction = \"Check the authentication for the user with the username \"sarah99\" and the password \"1234567890\".\"\nOutput:\n [/INST]", "label": "[{'api': 'checkAuthentication', 'parameters': {'username': 'sarah99', 'password': '1234567890'}, 'responses': ['API_call_0']}]", "predict": "\nAction: checkAuthentication\nAction Input: {\n  \"username\": \"sarah99\",\n  \"password\": \"1234567890\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkEMCRadiation', 'api_description': 'Check the level of electromagnetic radiation', 'field': 'Electrical Engineering/Electromagnetic Compatibility', 'parameters': {'device': {'type': 'str', 'description': 'The device or equipment to be checked for electromagnetic radiation'}, 'frequency': {'type': 'float', 'description': 'The frequency of the electromagnetic radiation in Hz'}, 'distance': {'type': 'float', 'description': 'The distance from the device to the measurement point in meters'}}, 'required': ['device'], 'responses': {'radiation_level': {'type': 'str', 'description': 'The level of electromagnetic radiation emitted by the device'}, 'safety_limit': {'type': 'str', 'description': 'The safety limit for electromagnetic radiation in this frequency range'}}}, {'api_name': 'scanApplication', 'api_description': 'Scans an application for potential security vulnerabilities.', 'field': 'Cybersecurity/Application Security', 'parameters': {'application_id': {'type': 'str', 'description': 'The ID of the application to be scanned'}, 'scan_type': {'type': 'str', 'description': 'The type of scan to be performed (e.g., static analysis, dynamic analysis)'}, 'scan_level': {'type': 'str', 'description': 'The level of scan intensity (e.g., low, medium, high)'}, 'timeout': {'type': 'int', 'description': 'The maximum time in seconds allowed for the scan to complete'}}, 'required': ['application_id'], 'responses': {'results': {'type': 'str', 'description': 'The scan results in a human-readable format'}, 'vulnerabilities': {'type': 'str', 'description': 'List of discovered vulnerabilities'}}}, {'api_name': 'getVisionTest', 'api_description': 'Get the results of a vision test', 'field': 'Healthcare/Ophthalmology', 'parameters': {'patient_id': {'type': 'str', 'description': 'The ID of the patient who took the vision test'}, 'test_date': {'type': 'str', 'description': 'The date on which the vision test was taken'}}, 'required': ['patient_id'], 'responses': {'visual_acuity': {'type': 'str', 'description': 'The visual acuity of the patient, indicating their clarity and sharpness of vision'}, 'refractive_error': {'type': 'str', 'description': \"The type and extent of refractive error of the patient's eyes\"}}}, {'api_name': 'levelUpCharacter', 'api_description': 'Increase the level of a game character', 'field': 'Information Technology/Game Development', 'parameters': {'character_id': {'type': 'str', 'description': 'The ID of the character to level up'}, 'level_increase': {'type': 'int', 'description': \"The number of levels to increase the character's level\"}}, 'required': ['character_id', 'level_increase'], 'responses': {'new_level': {'type': 'int', 'description': 'The new level of the character after leveling up'}, 'message': {'type': 'str', 'description': 'A message indicating the success or failure of leveling up'}}}, {'api_name': 'getImmunoglobulinLevel', 'api_description': \"Retrieve the level of immunoglobulin in a person's blood\", 'field': 'Biochemistry/Biochemical immunology', 'parameters': {'person_id': {'type': 'int', 'description': 'The unique identifier of the person whose immunoglobulin level is wanted (e.g., 1234)'}, 'time_period': {'type': 'str', 'description': 'The time period for which the immunoglobulin level is wanted (e.g., last month, last year)'}, 'type': {'type': 'str', 'description': 'The type of immunoglobulin to retrieve the level of (e.g., IgA, IgG, IgM)'}}, 'required': ['person_id', 'type'], 'responses': {'level': {'type': 'float', 'description': \"The level of the specified immunoglobulin in the person's blood\", 'unit': 'g/L'}}}]\ntask_instruction = \"Determine the scanning level of the application with the ID \"NnXPTpfesSRj\" as high.\"\nOutput:\n [/INST]", "label": "[{'api': 'scanApplication', 'parameters': {'application_id': 'NnXPTpfesSRj', 'scan_level': 'high'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: scanApplication\nAction Input: {\n  \"application_id\": \"NnXPTpfesSRj\",\n  \"scan_type\": \"high\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'scanEndpoint', 'api_description': 'Scan a specific endpoint for potential security threats', 'field': 'Cybersecurity/Endpoint Security', 'parameters': {'endpoint': {'type': 'str', 'description': 'The IP address or hostname of the endpoint to scan'}}, 'required': ['endpoint'], 'responses': {'scan_result': {'type': 'str', 'description': 'The result of the scan indicating potential security threats'}}}, {'api_name': 'scanVulnerabilities', 'api_description': 'Scan a system or network for vulnerabilities', 'field': 'Information Technology/Cybersecurity', 'parameters': {'target': {'type': 'str', 'description': 'The target system or network to be scanned'}, 'scan_type': {'type': 'str', 'description': 'The type of scan to be performed (e.g., port scanning, vulnerability scanning)'}}, 'required': ['target', 'scan_type'], 'responses': {'vulnerabilities': {'type': 'str', 'description': 'The detected vulnerabilities'}}}, {'api_name': 'scanMalware', 'api_description': 'Scan a file for malware', 'field': 'Technology/Computer Security', 'parameters': {'file_path': {'type': 'str', 'description': 'The path of the file to be scanned'}}, 'required': ['file_path'], 'responses': {'is_malware': {'type': 'bool', 'description': 'A boolean indicating whether the file is detected as malware or not'}}}, {'api_name': 'scanApplication', 'api_description': 'Scans an application for potential security vulnerabilities.', 'field': 'Cybersecurity/Application Security', 'parameters': {'application_id': {'type': 'str', 'description': 'The ID of the application to be scanned'}, 'scan_type': {'type': 'str', 'description': 'The type of scan to be performed (e.g., static analysis, dynamic analysis)'}, 'scan_level': {'type': 'str', 'description': 'The level of scan intensity (e.g., low, medium, high)'}, 'timeout': {'type': 'int', 'description': 'The maximum time in seconds allowed for the scan to complete'}}, 'required': ['application_id'], 'responses': {'results': {'type': 'str', 'description': 'The scan results in a human-readable format'}, 'vulnerabilities': {'type': 'str', 'description': 'List of discovered vulnerabilities'}}}, {'api_name': 'turnOnLight', 'api_description': 'Turn on the light in a specified room', 'field': 'Internet of Things/Home Automation', 'parameters': {'room': {'type': 'str', 'description': 'The room in which you want to turn on the light (e.g., living room, bedroom, kitchen)'}, 'brightness': {'type': 'int', 'description': 'The desired brightness level of the light (e.g., 1-10)'}, 'color': {'type': 'str', 'description': 'The desired color of the light (e.g., red, blue, green)'}}, 'required': ['room'], 'responses': {'status': {'type': 'str', 'description': 'The status of the light after the operation (e.g., on, off)'}}}]\ntask_instruction = \"Scan the endpoint \"192.168.247.218\".\"\nOutput:\n [/INST]", "label": "[{'api': 'scanEndpoint', 'parameters': {'endpoint': '192.168.247.218'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: scanEndpoint\nAction Input: {\n  \"endpoint\": \"192.168.247.218\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkWirelessNetwork', 'api_description': 'Check the security status of a wireless network', 'field': 'Cybersecurity/Wireless Security', 'parameters': {'network_name': {'type': 'str', 'description': 'The name of the wireless network to be checked'}, 'password': {'type': 'str', 'description': 'The password for the wireless network'}, 'scan_duration': {'type': 'int', 'description': 'The duration (in seconds) for scanning the wireless network'}}, 'required': ['network_name', 'password'], 'responses': {'security_status': {'type': 'str', 'description': 'The security status of the wireless network'}, 'vulnerabilities': {'type': 'str', 'description': 'Any vulnerabilities detected in the wireless network'}}}, {'api_name': 'scanNetwork', 'api_description': 'Scan the wireless network for potential security threats', 'field': 'Cybersecurity/Wireless Security', 'parameters': {'network_name': {'type': 'str', 'description': 'The name of the wireless network to scan (e.g., MyWiFi, CompanyNetwork)'}, 'scan_interval': {'type': 'int', 'description': 'The time interval between network scans in minutes (e.g., 10, 30, 60)'}, 'scan_duration': {'type': 'int', 'description': 'The duration of each network scan in seconds (e.g., 5, 10, 30)'}, 'detection_mode': {'type': 'str', 'description': 'The mode of detection to use during network scan (e.g., passive, active)'}, 'report_format': {'type': 'str', 'description': 'The desired format for the scan report (e.g., PDF, HTML, JSON)'}}, 'required': ['network_name'], 'responses': {'scan_results': {'type': 'str', 'description': 'The results of the network scan in the specified format'}, 'timestamp': {'type': 'str', 'description': 'The timestamp indicating when the scan was completed'}}}, {'api_name': 'checkInternetConnectivity', 'api_description': 'Check if there is an active internet connection', 'field': 'Telecommunications/Troubleshooting and Technical Support', 'parameters': {'website': {'type': 'str', 'description': 'A website URL to test internet connectivity (e.g., www.google.com, www.example.com)'}, 'timeout': {'type': 'int', 'description': 'Timeout in seconds for checking internet connectivity'}}, 'required': ['website'], 'responses': {'is_connected': {'type': 'bool', 'description': 'A boolean indicating if there is an active internet connection'}}}, {'api_name': 'checkIpAddress', 'api_description': 'Check if an IP address is safe or not.', 'field': 'Information Technology/Network Security', 'parameters': {'ip_address': {'type': 'str', 'description': 'The IP address to be checked for safety'}}, 'required': ['ip_address'], 'responses': {'is_safe': {'type': 'bool', 'description': 'Indicates whether the IP address is safe or not'}}}, {'api_name': 'validatePassword', 'api_description': 'Check if a password meets certain criteria', 'field': 'Information Technology/Front-end Development', 'parameters': {'password': {'type': 'str', 'description': 'The password to be validated'}, 'min_length': {'type': 'int', 'description': 'The minimum length of the password', 'default': 8}, 'require_special_char': {'type': 'bool', 'description': 'Whether the password should contain a special character', 'default': False}}, 'required': ['password'], 'responses': {'valid': {'type': 'bool', 'description': 'True if the password meets the criteria, False otherwise'}}}]\ntask_instruction = \"Check if the wireless network \"Public Free Wi-Fi\" is available and connect using the password \"MySecretNetwork\".\"\nOutput:\n [/INST]", "label": "[{'api': 'checkWirelessNetwork', 'parameters': {'network_name': 'Public Free Wi-Fi', 'password': 'MySecretNetwork'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "\nAction: scanNetwork\nAction Input: {\n  \"network_name\": \"Public Free Wi-Fi\",\n  \"scan_interval\": 30,\n  \"scan_duration\": 180,\n  \"detection_mode\": \"active\",\n  \"report_format\": \"json\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'scanNetwork', 'api_description': 'Scan the wireless network for potential security threats', 'field': 'Cybersecurity/Wireless Security', 'parameters': {'network_name': {'type': 'str', 'description': 'The name of the wireless network to scan (e.g., MyWiFi, CompanyNetwork)'}, 'scan_interval': {'type': 'int', 'description': 'The time interval between network scans in minutes (e.g., 10, 30, 60)'}, 'scan_duration': {'type': 'int', 'description': 'The duration of each network scan in seconds (e.g., 5, 10, 30)'}, 'detection_mode': {'type': 'str', 'description': 'The mode of detection to use during network scan (e.g., passive, active)'}, 'report_format': {'type': 'str', 'description': 'The desired format for the scan report (e.g., PDF, HTML, JSON)'}}, 'required': ['network_name'], 'responses': {'scan_results': {'type': 'str', 'description': 'The results of the network scan in the specified format'}, 'timestamp': {'type': 'str', 'description': 'The timestamp indicating when the scan was completed'}}}, {'api_name': 'monitorTraffic', 'api_description': 'Monitor network traffic and analyze patterns', 'field': 'Information Technology/Network Security', 'parameters': {'start_time': {'type': 'str', 'description': 'The start time for traffic monitoring (e.g., 2022-01-01 08:00:00)'}, 'end_time': {'type': 'str', 'description': 'The end time for traffic monitoring (e.g., 2022-01-01 18:00:00)'}}, 'required': ['start_time', 'end_time'], 'responses': {'traffic_data': {'type': 'str', 'description': 'The analyzed traffic data for the specified time period'}}}, {'api_name': 'scanVulnerabilities', 'api_description': 'Scan a system or network for vulnerabilities', 'field': 'Information Technology/Cybersecurity', 'parameters': {'target': {'type': 'str', 'description': 'The target system or network to be scanned'}, 'scan_type': {'type': 'str', 'description': 'The type of scan to be performed (e.g., port scanning, vulnerability scanning)'}}, 'required': ['target', 'scan_type'], 'responses': {'vulnerabilities': {'type': 'str', 'description': 'The detected vulnerabilities'}}}, {'api_name': 'getNetworkCoverage', 'api_description': 'Check the network coverage in a specific area', 'field': 'Telecommunications/Wireless Communications', 'parameters': {'area': {'type': 'str', 'description': 'The area for which you want to check the network coverage (e.g., city, neighborhood)'}}, 'required': ['area'], 'responses': {'network_coverage': {'type': 'str', 'description': 'The network coverage in the specified area'}}}, {'api_name': 'checkWirelessNetwork', 'api_description': 'Check the security status of a wireless network', 'field': 'Cybersecurity/Wireless Security', 'parameters': {'network_name': {'type': 'str', 'description': 'The name of the wireless network to be checked'}, 'password': {'type': 'str', 'description': 'The password for the wireless network'}, 'scan_duration': {'type': 'int', 'description': 'The duration (in seconds) for scanning the wireless network'}}, 'required': ['network_name', 'password'], 'responses': {'security_status': {'type': 'str', 'description': 'The security status of the wireless network'}, 'vulnerabilities': {'type': 'str', 'description': 'Any vulnerabilities detected in the wireless network'}}}]\ntask_instruction = \"Scan the network \"MyWiFi\" every 22 minutes using active detection mode.\"\nOutput:\n [/INST]", "label": "[{'api': 'scanNetwork', 'parameters': {'network_name': 'MyWiFi', 'scan_interval': '22', 'detection_mode': 'active'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "\n\nAction: scanNetwork\nAction Input: {\n  \"api_name\": \"scanNetwork\",\n  \"api_description\": \"Scan the wireless network for potential security threats\",\n  \"field\": \"Cybersecurity/Wireless Security\",\n  \"parameters\": {\n    \"network_name\": \"MyWiFi\",\n    \"scan_interval\": 22,\n    \"scan_duration\": 22,\n    \"detection_mode\": \"active\"\n  },\n  \"responses\": {\n    \"scan_results\": \"The results of the network scan in the specified format\",\n    \"timestamp\": \"The timestamp indicating when the scan was completed\"\n  }\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkDatabaseAccess', 'api_description': 'Check if a database can be accessed by the current user', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database to check access for'}, 'user_name': {'type': 'str', 'description': 'The username of the user attempting to access the database'}, 'password': {'type': 'str', 'description': 'The password of the user attempting to access the database'}}, 'required': ['database_name', 'user_name', 'password'], 'responses': {'access_granted': {'type': 'bool', 'description': 'Indicates if access is granted to the database'}}}, {'api_name': 'checkDatabaseStatus', 'api_description': 'Check the status of a database', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database to check'}, 'username': {'type': 'str', 'description': 'The username to authenticate the database'}, 'password': {'type': 'str', 'description': 'The password to authenticate the database'}}, 'required': ['database_name'], 'responses': {'status': {'type': 'str', 'description': 'The status of the specified database (e.g., online, offline)'}, 'message': {'type': 'str', 'description': 'Additional information or error message'}}}, {'api_name': 'getDatabaseInfo', 'api_description': 'Retrieve information about a database', 'field': 'Information Technology/Information Systems', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database for which you want to retrieve information'}}, 'required': ['database_name'], 'responses': {'size': {'type': 'int', 'description': 'The size of the specified database in megabytes'}, 'tables': {'type': 'int', 'description': 'The number of tables in the specified database'}, 'users': {'type': 'int', 'description': 'The number of registered users in the specified database'}}}, {'api_name': 'checkAccessRights', 'api_description': 'Verify access rights of a user for a specific resource', 'field': 'Criminal Justice/Cybersecurity', 'parameters': {'user_id': {'type': 'str', 'description': 'The unique identifier of the user'}, 'resource_id': {'type': 'str', 'description': 'The identifier of the resource being accessed'}}, 'required': ['user_id', 'resource_id'], 'responses': {'access_granted': {'type': 'bool', 'description': 'Whether the user has access rights to the specified resource'}}}, {'api_name': 'checkAccessControl', 'api_description': 'Check access control for a specific cloud resource', 'field': 'Cloud Computing/Cloud Security', 'parameters': {'resource_id': {'type': 'str', 'description': 'The ID of the cloud resource to be checked for access control'}, 'user_id': {'type': 'str', 'description': 'The ID of the user requesting access control check'}, 'permission': {'type': 'str', 'description': 'The permission level required for access (e.g., read, write, delete)'}}, 'required': ['resource_id', 'user_id', 'permission'], 'responses': {'allowed': {'type': 'bool', 'description': 'Indicates whether the access control check was successful'}, 'message': {'type': 'str', 'description': 'Additional message providing details about the access control status'}}}]\ntask_instruction = \"Check the access to the database named \"employees\" using the username \"admin\" and password \"12345\".\"\nOutput:\n [/INST]", "label": "[{'api': 'checkDatabaseAccess', 'parameters': {'database_name': 'employees', 'user_name': 'admin', 'password': '12345'}, 'responses': ['API_call_0']}]", "predict": "\n\nAction: checkDatabaseAccess\nAction Input: {\n  \"database_name\": \"employees\",\n  \"user_name\": \"admin\",\n  \"password\": \"12345\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'auditLogs', 'api_description': 'Audit the database logs for security events', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'Name of the database for log auditing'}}, 'required': ['database_name'], 'responses': {'audit_results': {'type': 'str', 'description': 'Results of the log auditing process'}}}, {'api_name': 'performSecurityAudit', 'api_description': 'Perform a security audit on a system or network', 'field': 'Cybersecurity/Security Auditing', 'parameters': {'system': {'type': 'str', 'description': 'The system or network to be audited (e.g., website, database, server)'}, 'scan_type': {'type': 'str', 'description': 'Specify the type of security scan to be performed (e.g., vulnerability scan, penetration test, code review)'}, 'target': {'type': 'str', 'description': 'Specify the target for the security audit (e.g., IP address, URL, domain name)'}}, 'required': ['system', 'scan_type', 'target'], 'responses': {'findings': {'type': 'str', 'description': 'The findings and vulnerabilities discovered during the security audit'}, 'recommendations': {'type': 'str', 'description': 'Recommendations for improving the security of the system or network'}}}, {'api_name': 'getAppLogs', 'api_description': 'Retrieve logs for an application on the PaaS platform', 'field': 'Cloud Computing/Platform as a Service (PaaS)', 'parameters': {'app_id': {'type': 'str', 'description': 'The ID of the application to retrieve logs from'}, 'start_time': {'type': 'str', 'description': 'The start time of the log retrieval period in UTC format'}, 'end_time': {'type': 'str', 'description': 'The end time of the log retrieval period in UTC format'}}, 'required': ['app_id'], 'responses': {'logs': {'type': 'str', 'description': 'The logs retrieved for the specified application'}}}, {'api_name': 'getHadoopLogs', 'api_description': 'Retrieve the log files of Hadoop', 'field': 'Big Data/Hadoop ecosystem', 'parameters': {'start_date': {'type': 'str', 'description': 'The start date for log retrieval (e.g., 2021-01-01)'}, 'end_date': {'type': 'str', 'description': 'The end date for log retrieval (e.g., 2021-01-31)'}}, 'required': [], 'responses': {'logs': {'type': 'str', 'description': 'The log files of Hadoop'}}}, {'api_name': 'getEnergyAuditData', 'api_description': 'Retrieve energy audit data for a specific location', 'field': 'Energy/Energy Audit', 'parameters': {'location': {'type': 'str', 'description': 'The location for which you want to retrieve energy audit data (e.g., building name, street address)'}, 'start_date': {'type': 'str', 'description': 'The starting date for the energy audit data (e.g., 2022-01-01)'}, 'end_date': {'type': 'str', 'description': 'The ending date for the energy audit data (e.g., 2022-12-31)'}}, 'required': ['location', 'start_date', 'end_date'], 'responses': {'electricity_consumption': {'type': 'float', 'description': 'The amount of electricity consumed during the specified period'}, 'gas_consumption': {'type': 'float', 'description': 'The amount of gas consumed during the specified period'}, 'water_consumption': {'type': 'float', 'description': 'The amount of water consumed during the specified period'}}}]\ntask_instruction = \"Retrieve the audit logs from the SecurityLogsDB database.\"\nOutput:\n [/INST]", "label": "[{'api': 'auditLogs', 'parameters': {'database_name': 'SecurityLogsDB'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\n\nAction: auditLogs\nAction Input: {\n  \"database_name\": \"SecurityLogsDB\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'grantAccess', 'api_description': 'Grant access to a user for the specified database', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'Name of the database to grant access to'}, 'username': {'type': 'str', 'description': 'Username of the user to grant access'}}, 'required': ['database_name', 'username'], 'responses': {'access_granted': {'type': 'bool', 'description': 'Indicates whether access was successfully granted'}}}, {'api_name': 'checkDatabaseAccess', 'api_description': 'Check if a database can be accessed by the current user', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database to check access for'}, 'user_name': {'type': 'str', 'description': 'The username of the user attempting to access the database'}, 'password': {'type': 'str', 'description': 'The password of the user attempting to access the database'}}, 'required': ['database_name', 'user_name', 'password'], 'responses': {'access_granted': {'type': 'bool', 'description': 'Indicates if access is granted to the database'}}}, {'api_name': 'getDatabaseInfo', 'api_description': 'Retrieve information about a database', 'field': 'Information Technology/Information Systems', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database for which you want to retrieve information'}}, 'required': ['database_name'], 'responses': {'size': {'type': 'int', 'description': 'The size of the specified database in megabytes'}, 'tables': {'type': 'int', 'description': 'The number of tables in the specified database'}, 'users': {'type': 'int', 'description': 'The number of registered users in the specified database'}}}, {'api_name': 'checkAccessRights', 'api_description': 'Verify access rights of a user for a specific resource', 'field': 'Criminal Justice/Cybersecurity', 'parameters': {'user_id': {'type': 'str', 'description': 'The unique identifier of the user'}, 'resource_id': {'type': 'str', 'description': 'The identifier of the resource being accessed'}}, 'required': ['user_id', 'resource_id'], 'responses': {'access_granted': {'type': 'bool', 'description': 'Whether the user has access rights to the specified resource'}}}, {'api_name': 'checkDatabaseStatus', 'api_description': 'Check the status of a database', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database to check'}, 'username': {'type': 'str', 'description': 'The username to authenticate the database'}, 'password': {'type': 'str', 'description': 'The password to authenticate the database'}}, 'required': ['database_name'], 'responses': {'status': {'type': 'str', 'description': 'The status of the specified database (e.g., online, offline)'}, 'message': {'type': 'str', 'description': 'Additional information or error message'}}}]\ntask_instruction = \"Grant access to the sales database for user 'emma_garcia'.\"\nOutput:\n [/INST]", "label": "[{'api': 'grantAccess', 'parameters': {'database_name': 'sales', 'username': 'emma_garcia'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nThe previous assistant message instructed me to choose the needed APIs and return the API calling list based on the given task instruction. Since the task instruction was \"Grant access to the sales database for user 'emma_garcia'\", I need to call the \"grantAccess\" API with the arguments \"database_name\" as \"sales_database\" and \"username\" as \"emma_garcia\". This API call will allow me to grant access to the sales database for the specified user.\nAction: grantAccess\nAction Input: {\n  \"database_name\": \"sales_database\",\n  \"username\": \"emma_garcia\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkDatabaseStatus', 'api_description': 'Check the status of a database', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database to check'}, 'username': {'type': 'str', 'description': 'The username to authenticate the database'}, 'password': {'type': 'str', 'description': 'The password to authenticate the database'}}, 'required': ['database_name'], 'responses': {'status': {'type': 'str', 'description': 'The status of the specified database (e.g., online, offline)'}, 'message': {'type': 'str', 'description': 'Additional information or error message'}}}, {'api_name': 'getDatabaseInfo', 'api_description': 'Retrieve information about a database', 'field': 'Information Technology/Information Systems', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database for which you want to retrieve information'}}, 'required': ['database_name'], 'responses': {'size': {'type': 'int', 'description': 'The size of the specified database in megabytes'}, 'tables': {'type': 'int', 'description': 'The number of tables in the specified database'}, 'users': {'type': 'int', 'description': 'The number of registered users in the specified database'}}}, {'api_name': 'checkDatabaseAccess', 'api_description': 'Check if a database can be accessed by the current user', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database to check access for'}, 'user_name': {'type': 'str', 'description': 'The username of the user attempting to access the database'}, 'password': {'type': 'str', 'description': 'The password of the user attempting to access the database'}}, 'required': ['database_name', 'user_name', 'password'], 'responses': {'access_granted': {'type': 'bool', 'description': 'Indicates if access is granted to the database'}}}, {'api_name': 'queryData', 'api_description': 'Retrieve data from a database using specified conditions', 'field': 'Software Development/Database development', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database to query'}, 'query_conditions': {'type': 'str', 'description': \"The conditions to be applied for data retrieval (e.g., 'SELECT * FROM table WHERE condition')\"}}, 'required': ['database_name', 'query_conditions'], 'responses': {'data': {'type': 'str', 'description': 'The retrieved data from the database'}}}, {'api_name': 'createDatabase', 'api_description': 'Create a new database', 'field': 'Technology/Database Management', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database'}, 'username': {'type': 'str', 'description': 'The username to access the database'}, 'password': {'type': 'str', 'description': 'The password to access the database'}}, 'required': ['database_name'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the database creation was successful'}}}]\ntask_instruction = \"Check the status of the MySQL database.\"\nOutput:\n [/INST]", "label": "[{'api': 'checkDatabaseStatus', 'parameters': {'database_name': 'MySQL'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "\napi_calling_list = [\n  {\n    \"api_name\": \"checkDatabaseStatus\",\n    \"parameters\": {\n      \"database_name\": \"mySqlDatabase\"\n    }\n  },\n  {\n    \"api_name\": \"getDatabaseInfo\",\n    \"parameters\": {\n      \"database_name\": \"mySqlDatabase\"\n    }\n  },\n  {\n    \"api_name\": \"queryData\",\n    \"parameters\": {\n      \"database_name\": \"mySqlDatabase\",\n      \"query_conditions\": \"SELECT * FROM table\"\n    }\n  },\n  {\n    \"api_name\": \"createDatabase\",\n    \"parameters\": {\n      \"database_name\": \"mySqlDatabase\"\n    }\n  }\n]\nAction: checkDatabaseStatus\nAction Input: {\n  \"database_name\": \"mySqlDatabase\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'changeDatabasePassword', 'api_description': 'Change the password of a database user', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database'}, 'username': {'type': 'str', 'description': 'The username of the user to change the password for'}, 'new_password': {'type': 'str', 'description': 'The new password for the user'}}, 'required': ['database_name', 'username', 'new_password'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the password change was successful or not'}}}, {'api_name': 'changePassword', 'api_description': 'Change password for a user account in a library website', 'field': 'Library Science/Library Web Security', 'parameters': {'username': {'type': 'str', 'description': 'The username of the account for which the password is being changed'}, 'current_password': {'type': 'str', 'description': 'The current password of the user'}, 'new_password': {'type': 'str', 'description': 'The new password to set for the user account'}}, 'required': ['username', 'current_password', 'new_password'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the password change was successful'}}}, {'api_name': 'resetPassword', 'api_description': 'Reset the password for a user account', 'field': 'Cybersecurity/Identity and Access Management', 'parameters': {'username': {'type': 'str', 'description': 'The username of the account to reset the password for'}, 'new_password': {'type': 'str', 'description': 'The new password to be set for the user account'}, 'email': {'type': 'str', 'description': 'The email address associated with the user account'}}, 'required': ['username', 'new_password', 'email'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the password reset was successful or not'}, 'message': {'type': 'str', 'description': 'A message explaining the result of the password reset'}}}, {'api_name': 'generateRandomPassword', 'api_description': 'Generate a random password with specified length and complexity', 'field': 'Technology/Cybersecurity', 'parameters': {'length': {'type': 'int', 'description': 'The length of the password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the password (e.g., Low, Medium, High)'}}, 'required': ['length'], 'responses': {'password': {'type': 'str', 'description': 'The generated random password'}}}, {'api_name': 'generateSecurePassword', 'api_description': 'Generate a secure password with specified length and complexity', 'field': 'Technology/Computer Security', 'parameters': {'length': {'type': 'int', 'description': 'The length of the generated password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the generated password (e.g., low, medium, high)'}}, 'required': ['length', 'complexity'], 'responses': {'password': {'type': 'str', 'description': 'The generated secure password'}}}]\ntask_instruction = \"Change the password for the 'charlie' user in the MySQL database to 'Password123!'.\"\nOutput:\n [/INST]", "label": "[{'api': 'changeDatabasePassword', 'parameters': {'database_name': 'MySQL', 'username': 'charlie', 'new_password': 'Password123!'}, 'responses': ['API_call_0']}]", "predict": "\nAction: changePassword\nAction Input: {\n  \"username\": \"charlie\",\n  \"current_password\": \"Password123!\",\n  \"new_password\": \"Password123!\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkSSL', 'api_description': 'Check the SSL certificate of a website', 'field': 'Cybersecurity/Web Security', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the website to check the SSL certificate for'}}, 'required': ['website_url'], 'responses': {'certificate_info': {'type': 'str', 'description': 'Information about the SSL certificate of the website'}, 'expiry_date': {'type': 'str', 'description': 'The expiry date of the SSL certificate'}}}, {'api_name': 'checkSSLValidity', 'api_description': 'Check the SSL certificate validity of a website', 'field': 'Web Development/Web security', 'parameters': {'website': {'type': 'str', 'description': 'The URL of the website to be checked'}}, 'required': ['website'], 'responses': {'validity': {'type': 'bool', 'description': 'True if the SSL certificate is valid, False otherwise'}}}, {'api_name': 'checkWebAccessibility', 'api_description': 'Check the web accessibility of a library website', 'field': 'Library Science/Library Web Accessibility', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the library website to check for accessibility'}, 'user_role': {'type': 'str', 'description': 'The role of the user accessing the website (e.g., librarian, patron)'}, 'accessibility_level': {'type': 'str', 'description': 'Specify the desired accessibility level (e.g., WCAG Level A, WCAG Level AA, WCAG Level AAA)'}, 'browser': {'type': 'str', 'description': 'Choose the browser to simulate for testing (e.g., Chrome, Firefox, Safari)'}, 'language': {'type': 'str', 'description': 'Select the language for accessibility evaluation (e.g., English, Spanish, French)'}}, 'required': ['website_url'], 'responses': {'is_accessible': {'type': 'bool', 'description': 'Indicates whether the library website meets the specified accessibility level'}, 'compliance_issues': {'type': 'str', 'description': 'List of compliance issues found in the website (if any)'}, 'recommended_actions': {'type': 'str', 'description': 'Suggests actions to improve web accessibility'}}}, {'api_name': 'testWebsite', 'api_description': 'Test a website for errors and bugs', 'field': 'Web Development/Testing and debugging', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the website you want to test for errors'}}, 'required': ['website_url'], 'responses': {'errors_found': {'type': 'int', 'description': 'The number of errors and bugs found during the test'}, 'error_details': {'type': 'str', 'description': 'Detailed information about the errors and bugs found'}}}, {'api_name': 'checkWebsiteSecurity', 'api_description': 'Check the security of a website', 'field': 'Technology/Internet Security', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the website to check'}}, 'required': ['website_url'], 'responses': {'security_score': {'type': 'float', 'description': 'The security score of the website'}}}]\ntask_instruction = \"Check the SSL certificate of the website \"google.com\".\"\nOutput:\n [/INST]", "label": "[{'api': 'checkSSL', 'parameters': {'website_url': 'https://google.com'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "\nAction: checkSSL\nAction Input: {\n  \"website_url\": \"google.com\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'decryptMessage', 'api_description': 'Decrypt an encrypted message using a cryptography algorithm', 'field': 'Cybersecurity/Cryptography', 'parameters': {'encrypted_message': {'type': 'str', 'description': 'The encrypted message to be decrypted'}, 'algorithm': {'type': 'str', 'description': 'The decryption algorithm to be used (e.g., AES, RSA)'}, 'key': {'type': 'str', 'description': 'The decryption key required for the selected algorithm'}}, 'required': ['encrypted_message', 'algorithm', 'key'], 'responses': {'decrypted_message': {'type': 'str', 'description': 'The decrypted version of the provided encrypted message'}}}, {'api_name': 'decryptResource', 'api_description': 'Decrypt an encrypted digital resource or document in a library', 'field': 'Library Science/Library Digital Security', 'parameters': {'encrypted_resource_url': {'type': 'str', 'description': 'The URL or path to the encrypted digital resource'}, 'decryption_key': {'type': 'str', 'description': 'The decryption key for accessing the resource'}}, 'required': ['encrypted_resource_url', 'decryption_key'], 'responses': {'decrypted_resource_url': {'type': 'str', 'description': 'The URL or path to the decrypted digital resource'}}}, {'api_name': 'encrypt', 'api_description': 'Encrypts a message using a specified cryptographic algorithm', 'field': 'Computer Science/Cryptography', 'parameters': {'message': {'type': 'str', 'description': 'The message that needs to be encrypted'}, 'algorithm': {'type': 'str', 'description': 'The cryptographic algorithm to be used for encryption (e.g., AES, RSA)'}, 'key': {'type': 'str', 'description': 'The encryption key to be used'}}, 'required': ['message', 'algorithm', 'key'], 'responses': {'encrypted_message': {'type': 'str', 'description': 'The encrypted form of the input message'}}}, {'api_name': 'deleteMessage', 'api_description': 'Delete a digital message', 'field': 'Communication/Digital Communication', 'parameters': {'message_id': {'type': 'int', 'description': 'The ID of the message to be deleted'}}, 'required': ['message_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the message was successfully deleted'}}}, {'api_name': 'decodeMessage', 'api_description': 'Decode an encoded message using coding theory', 'field': 'Mathematics/Coding Theory', 'parameters': {'encoded_message': {'type': 'str', 'description': 'The encoded message to be decoded'}}, 'required': ['encoded_message'], 'responses': {'decoded_message': {'type': 'str', 'description': 'The decoded message'}}}]\ntask_instruction = \"Please decrypt the message \"rtr\" using the RSA algorithm and key XY92OL3.\"\nOutput:\n [/INST]", "label": "[{'api': 'decryptMessage', 'parameters': {'encrypted_message': 'rtr', 'algorithm': 'RSA', 'key': 'XY92OL3'}, 'responses': ['API_call_0']}]", "predict": "Please decrypt the message \"rtr\" using the RSA algorithm and key XY92OL3.\nAction: decryptMessage\nAction Input: {\n  \"encrypted_message\": \"rtr\",\n  \"algorithm\": \"RSA\",\n  \"key\": \"XY92OL3\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getThreatIntelligence', 'api_description': 'Retrieve threat intelligence information', 'field': 'Cybersecurity/Threat Intelligence', 'parameters': {'threat_level': {'type': 'str', 'description': 'Specify the desired threat level for the intelligence report (e.g., low, medium, high)'}, 'industry': {'type': 'str', 'description': 'Specify the industry for which you want to receive threat intelligence (e.g., finance, healthcare, technology)'}, 'time_frame': {'type': 'str', 'description': 'Specify a time frame for the threat intelligence report (e.g., past week, past month, year-to-date)'}, 'keyword': {'type': 'str', 'description': 'Specify a keyword to search for in the threat intelligence report'}}, 'required': ['threat_level'], 'responses': {'intelligence_report': {'type': 'str', 'description': 'The threat intelligence report containing information about the specified threat level, industry, time frame, and keyword'}}}, {'api_name': 'getGlobalThreats', 'api_description': 'Retrieve information on global security threats', 'field': 'Political Science/International Security', 'parameters': {'country': {'type': 'str', 'description': 'The name of the country for which you want to get security threat information (e.g., United States, China, Russia)'}, 'region': {'type': 'str', 'description': 'The region for which you want to get security threat information (e.g., Middle East, Asia-Pacific, Europe)'}, 'incident_type': {'type': 'str', 'description': 'The type of security incident for which you want to get information (e.g., terrorism, cyber attacks, military conflicts)'}}, 'required': ['country', 'region'], 'responses': {'threat_level': {'type': 'str', 'description': 'The level of threat in the specified country/region'}, 'incident_details': {'type': 'str', 'description': 'The details and analysis of the security incident'}, 'impact': {'type': 'str', 'description': 'The potential impact of the security incident on the country/region'}, 'recommendations': {'type': 'str', 'description': 'Recommendations for mitigating the security threat'}}}, {'api_name': 'getThreatLevel', 'api_description': 'Retrieve the current threat level for national security', 'field': 'Government/National security', 'parameters': {'country': {'type': 'str', 'description': 'The country for which you want to get the national security threat level'}}, 'required': ['country'], 'responses': {'threat_level': {'type': 'int', 'description': 'The current threat level for national security in the specified country'}}}, {'api_name': 'getBIReport', 'api_description': 'Retrieve a business intelligence report', 'field': 'Data Science/Business Intelligence', 'parameters': {'report_type': {'type': 'str', 'description': 'The type of BI report to retrieve (e.g., sales report, customer analysis, revenue forecast)'}, 'time_frame': {'type': 'str', 'description': 'The time frame for the report (e.g., monthly, quarterly, yearly)'}, 'region': {'type': 'str', 'description': 'The region for which the report is generated (e.g., North America, Europe, Asia)'}}, 'required': ['report_type'], 'responses': {'report_data': {'type': 'str', 'description': 'The data included in the BI report'}, 'timestamp': {'type': 'str', 'description': 'The timestamp when the report was generated'}}}, {'api_name': 'getCybersecurityThreats', 'api_description': 'Retrieve cybersecurity threats in virtual reality', 'field': 'Virtual Reality/Virtual reality cybersecurity', 'parameters': {}, 'required': [], 'responses': {'threats': {'type': 'str', 'description': 'A list of cybersecurity threats in the virtual reality environment'}}}]\ntask_instruction = \"Retrieve threat intelligence information for the finance industry with a threat level categorized as low.\"\nOutput:\n [/INST]", "label": "[{'api': 'getThreatIntelligence', 'parameters': {'threat_level': 'low', 'industry': 'finance'}, 'responses': ['API_call_0']}]", "predict": "\nAction: getThreatIntelligence\nAction Input: {\n  \"threat_level\": \"low\",\n  \"industry\": \"finance\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'exploitVulnerability', 'api_description': 'Exploit a known vulnerability in a target system', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target_ip': {'type': 'str', 'description': 'The IP address of the target system to be exploited'}}, 'required': ['target_ip'], 'responses': {'exploited': {'type': 'bool', 'description': 'True if the exploit was successful, False otherwise'}}}, {'api_name': 'scanVulnerabilities', 'api_description': 'Scan a system or network for vulnerabilities', 'field': 'Information Technology/Cybersecurity', 'parameters': {'target': {'type': 'str', 'description': 'The target system or network to be scanned'}, 'scan_type': {'type': 'str', 'description': 'The type of scan to be performed (e.g., port scanning, vulnerability scanning)'}}, 'required': ['target', 'scan_type'], 'responses': {'vulnerabilities': {'type': 'str', 'description': 'The detected vulnerabilities'}}}, {'api_name': 'scanMalware', 'api_description': 'Scan a file for malware', 'field': 'Technology/Computer Security', 'parameters': {'file_path': {'type': 'str', 'description': 'The path of the file to be scanned'}}, 'required': ['file_path'], 'responses': {'is_malware': {'type': 'bool', 'description': 'A boolean indicating whether the file is detected as malware or not'}}}, {'api_name': 'checkWebsiteSecurity', 'api_description': 'Check the security of a website', 'field': 'Technology/Internet Security', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the website to check'}}, 'required': ['website_url'], 'responses': {'security_score': {'type': 'float', 'description': 'The security score of the website'}}}, {'api_name': 'performSecurityAudit', 'api_description': 'Perform a security audit on a system or network', 'field': 'Cybersecurity/Security Auditing', 'parameters': {'system': {'type': 'str', 'description': 'The system or network to be audited (e.g., website, database, server)'}, 'scan_type': {'type': 'str', 'description': 'Specify the type of security scan to be performed (e.g., vulnerability scan, penetration test, code review)'}, 'target': {'type': 'str', 'description': 'Specify the target for the security audit (e.g., IP address, URL, domain name)'}}, 'required': ['system', 'scan_type', 'target'], 'responses': {'findings': {'type': 'str', 'description': 'The findings and vulnerabilities discovered during the security audit'}, 'recommendations': {'type': 'str', 'description': 'Recommendations for improving the security of the system or network'}}}]\ntask_instruction = \"Perform a vulnerability scan on the website system with the target IP address as 192.168.81.254.\"\nOutput:\n [/INST]", "label": "[{'api': 'performSecurityAudit', 'parameters': {'system': 'website', 'scan_type': 'vulnerability scan', 'target': '192.168.81.254'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "Please choose the needed apis and return the api_calling list according to the task_instruction.\nAction: scanVulnerabilities\nAction Input: {\n  \"target\": \"192.168.81.254\",\n  \"scan_type\": \"vulnerability\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'resetPassword', 'api_description': 'Reset the password for a user account', 'field': 'Cybersecurity/Identity and Access Management', 'parameters': {'username': {'type': 'str', 'description': 'The username of the account to reset the password for'}, 'new_password': {'type': 'str', 'description': 'The new password to be set for the user account'}, 'email': {'type': 'str', 'description': 'The email address associated with the user account'}}, 'required': ['username', 'new_password', 'email'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the password reset was successful or not'}, 'message': {'type': 'str', 'description': 'A message explaining the result of the password reset'}}}, {'api_name': 'generateRandomPassword', 'api_description': 'Generate a random password with specified length and complexity', 'field': 'Technology/Cybersecurity', 'parameters': {'length': {'type': 'int', 'description': 'The length of the password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the password (e.g., Low, Medium, High)'}}, 'required': ['length'], 'responses': {'password': {'type': 'str', 'description': 'The generated random password'}}}, {'api_name': 'generateSecurePassword', 'api_description': 'Generate a secure password with specified length and complexity', 'field': 'Technology/Computer Security', 'parameters': {'length': {'type': 'int', 'description': 'The length of the generated password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the generated password (e.g., low, medium, high)'}}, 'required': ['length', 'complexity'], 'responses': {'password': {'type': 'str', 'description': 'The generated secure password'}}}, {'api_name': 'changeDatabasePassword', 'api_description': 'Change the password of a database user', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database'}, 'username': {'type': 'str', 'description': 'The username of the user to change the password for'}, 'new_password': {'type': 'str', 'description': 'The new password for the user'}}, 'required': ['database_name', 'username', 'new_password'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the password change was successful or not'}}}, {'api_name': 'generateOTP', 'api_description': 'Generate a one-time password (OTP)', 'field': 'Technology/Computer Security', 'parameters': {'length': {'type': 'int', 'description': 'The length of the OTP'}, 'validity': {'type': 'int', 'description': 'The validity period of the OTP in minutes'}}, 'required': ['length', 'validity'], 'responses': {'otp': {'type': 'str', 'description': 'The generated OTP'}}}]\ntask_instruction = \"Reset the password for the username \"john_smith\" to \"SecureUser87\" and send the reset password link to the email address \"GbRLvM2PweU@outlook.com\".\"\nOutput:\n [/INST]", "label": "[{'api': 'resetPassword', 'parameters': {'username': 'john_smith', 'new_password': 'SecureUser87', 'email': 'GbRLvM2PweU@outlook.com'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\nAction: resetPassword\nAction Input: {\n  \"username\": \"john_smith\",\n  \"new_password\": \"SecureUser87\",\n  \"email\": \"GbRLvM2PweU@outlook.com\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getLoggedInUsers', 'api_description': 'Retrieve the number of logged in users', 'field': 'Cybersecurity/Security Analytics', 'parameters': {'time_period': {'type': 'str', 'description': 'Specify the time period for which you want to retrieve the data (e.g., last hour, last day, last week)'}, 'location': {'type': 'str', 'description': 'The location of the data center (e.g., USA, Europe, Asia)'}, 'include_internal': {'type': 'bool', 'description': 'Include internal users in the count (true/false)'}}, 'required': ['time_period', 'location'], 'responses': {'logged_in_users': {'type': 'int', 'description': 'The number of currently logged in users'}}}, {'api_name': 'getUserInfo', 'api_description': 'Retrieve user information', 'field': 'Information Technology/Information Systems', 'parameters': {'user_id': {'type': 'int', 'description': 'The ID of the user for whom you want to retrieve information'}}, 'required': ['user_id'], 'responses': {'user_info': {'type': 'str', 'description': 'The information of the user, including name, email, role, and department'}}}, {'api_name': 'getUser', 'api_description': 'Retrieve user information by user ID', 'field': 'Mobile Development/Mobile Backend Development', 'parameters': {'user_id': {'type': 'str', 'description': 'The ID of the user to retrieve'}}, 'required': ['user_id'], 'responses': {'name': {'type': 'str', 'description': 'The name of the user'}, 'email': {'type': 'str', 'description': 'The email address of the user'}, 'profile_picture': {'type': 'str', 'description': \"The URL of the user's profile picture\"}}}, {'api_name': 'getWebsiteVisitors', 'api_description': 'Retrieve the number of visitors to a website', 'field': 'Marketing/Web analytics', 'parameters': {'website': {'type': 'str', 'description': 'The URL of the website you want to get data for (e.g., www.example.com)'}, 'start_date': {'type': 'str', 'description': 'Specify the start date for the data retrieval (e.g., 2022-01-01)'}, 'end_date': {'type': 'str', 'description': 'Specify the end date for the data retrieval (e.g., 2022-12-31)'}}, 'required': ['website'], 'responses': {'visitors': {'type': 'int', 'description': 'The number of visitors to the website for the specified period'}}}, {'api_name': 'loginWithSocialMedia', 'api_description': 'Allows a user to login using their social media account', 'field': 'Mobile Development/Mobile Social Networking', 'parameters': {'social_media': {'type': 'str', 'description': 'The social media platform to use for login (e.g., Facebook, Twitter, Google+)'}, 'username': {'type': 'str', 'description': 'The username associated with the social media account'}, 'password': {'type': 'str', 'description': 'The password for the social media account'}}, 'required': ['social_media', 'username', 'password'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the login process was successful'}}}]\ntask_instruction = \"Provide a list of users who were logged in at 15:21 in Asia.\"\nOutput:\n [/INST]", "label": "[{'api': 'getLoggedInUsers', 'parameters': {'time_period': '15:21', 'location': 'Asia'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\nAction: getLoggedInUsers\nAction Input: {\n  \"time_period\": \"15:21\",\n  \"location\": \"Asia\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'detectMaliciousActivity', 'api_description': 'Detects and identifies malicious activity in a network or system using artificial intelligence techniques', 'field': 'Cybersecurity/Artificial Intelligence for Cybersecurity', 'parameters': {'data': {'type': 'str', 'description': 'The data or log file to be analyzed for potential malicious activity'}, 'algorithm': {'type': 'str', 'description': 'The algorithm to be used for the analysis (e.g., machine learning, deep learning)'}}, 'required': ['data', 'algorithm'], 'responses': {'malicious_activity': {'type': 'bool', 'description': 'Flag indicating whether malicious activity is detected'}, 'result': {'type': 'str', 'description': 'The detailed result of the analysis'}}}, {'api_name': 'checkVulnerability', 'api_description': 'Check if a system has any vulnerabilities', 'field': 'Technology/Cybersecurity', 'parameters': {'ip_address': {'type': 'str', 'description': 'The IP address of the system to be checked for vulnerabilities'}, 'port': {'type': 'int', 'description': 'The port number to be scanned for vulnerabilities'}, 'scan_type': {'type': 'str', 'description': 'Specify the type of scan to be performed (e.g., quick, full, stealth)'}}, 'required': ['ip_address'], 'responses': {'vulnerabilities_found': {'type': 'bool', 'description': 'Indicates whether any vulnerabilities were found during the scan'}, 'vulnerability_details': {'type': 'str', 'description': 'Details about the vulnerabilities found (if any)'}}}, {'api_name': 'checkCopyrightInfringement', 'api_description': 'Check if a published work infringes upon copyright laws', 'field': 'Publishing/Copyright and licensing', 'parameters': {'title': {'type': 'str', 'description': 'The title of the published work'}, 'author': {'type': 'str', 'description': 'The author of the published work'}, 'source': {'type': 'str', 'description': 'The source of the published work (e.g., website, book)'}, 'date_published': {'type': 'str', 'description': 'The date of publication of the work'}}, 'required': ['title', 'author', 'source'], 'responses': {'infringement': {'type': 'bool', 'description': 'True if the published work infringes upon copyright laws, False otherwise'}}}, {'api_name': 'scanMalware', 'api_description': 'Scan a file for malware', 'field': 'Technology/Computer Security', 'parameters': {'file_path': {'type': 'str', 'description': 'The path of the file to be scanned'}}, 'required': ['file_path'], 'responses': {'is_malware': {'type': 'bool', 'description': 'A boolean indicating whether the file is detected as malware or not'}}}, {'api_name': 'checkEthicalViolation', 'api_description': 'Check if a certain action violates any ethical principles in medical ethics', 'field': 'Ethics/Medical Ethics', 'parameters': {'action': {'type': 'str', 'description': 'The action that needs to be checked for ethical violation'}}, 'required': ['action'], 'responses': {'violation': {'type': 'bool', 'description': 'A boolean value indicating if the action violates any ethical principles'}}}]\ntask_instruction = \"Determine if the \"network_traffic.pcap\" file contains any malicious activity using machine learning algorithms.\"\nOutput:\n [/INST]", "label": "[{'api': 'detectMaliciousActivity', 'parameters': {'data': 'network_traffic.pcap', 'algorithm': 'machine learning'}, 'responses': ['API_call_0', 'API_call_1']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\nAction: detectMaliciousActivity\nAction Input: {\n  \"data\": \"network_traffic.pcap\",\n  \"algorithm\": \"machine learning\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'checkDeviceStatus', 'api_description': 'Check the status of a specific IoT device', 'field': 'Cybersecurity/IoT Security', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the IoT device (e.g., ABC123)', 'example': 'ABC123'}}, 'required': ['device_id'], 'responses': {'status': {'type': 'str', 'description': 'The current status of the device (e.g., online, offline, compromised)'}}}, {'api_name': 'getDeviceInfo', 'api_description': 'Retrieve device information of an iOS device', 'field': 'Mobile Development/iOS Development', 'parameters': {'device_type': {'type': 'str', 'description': 'The type of iOS device (e.g., iPhone, iPad)'}, 'model': {'type': 'str', 'description': 'The specific model of the iOS device (e.g., iPhone X, iPad Pro)'}, 'serial_number': {'type': 'str', 'description': 'The serial number of the iOS device'}}, 'required': ['device_type', 'serial_number'], 'responses': {'device_info': {'type': 'str', 'description': 'Detailed information about the specified iOS device'}}}, {'api_name': 'getFacilityStatus', 'api_description': 'Retrieve the status of a specific facility', 'field': 'Hospitality/Facilities Management', 'parameters': {'facility_id': {'type': 'str', 'description': 'The ID of the facility (e.g., Room 101, Conference Hall 2)'}, 'date': {'type': 'str', 'description': 'The date for which you want to check the facility status (e.g., 2022-01-01)'}, 'time': {'type': 'str', 'description': 'The time for which you want to check the facility status (e.g., 09:00 AM, 15:30 PM)'}}, 'required': ['facility_id', 'date', 'time'], 'responses': {'status': {'type': 'str', 'description': 'The status of the facility (e.g., available, occupied)'}, 'occupant': {'type': 'str', 'description': 'The name of the occupant if the facility is occupied'}}}, {'api_name': 'getRobotStatus', 'api_description': 'Retrieve the status of a robot', 'field': 'Science/Robotics', 'parameters': {'robot_id': {'type': 'str', 'description': 'The unique ID of the robot'}, 'location': {'type': 'str', 'description': 'The location of the robot (e.g., lab, warehouse, outdoor)'}, 'time_interval': {'type': 'int', 'description': 'The time interval in seconds for checking the robot status'}}, 'required': ['robot_id'], 'responses': {'status': {'type': 'str', 'description': 'The current status of the robot (e.g., idle, moving, charging)'}, 'battery_level': {'type': 'int', 'description': 'The battery level of the robot'}}}, {'api_name': 'getMicroNanoRobotStatus', 'api_description': 'Retrieve the status of a micro/nano robot', 'field': 'Robotics/Micro/nano robotics', 'parameters': {'robot_name': {'type': 'str', 'description': 'The name of the micro/nano robot for which you want to retrieve the status'}}, 'required': ['robot_name'], 'responses': {'status': {'type': 'str', 'description': 'The current status of the specified micro/nano robot'}}}]\ntask_instruction = \"Check the status of device with ID \"mss2qhz2\".\"\nOutput:\n [/INST]", "label": "[{'api': 'checkDeviceStatus', 'parameters': {'device_id': 'mss2qhz2'}, 'responses': ['API_call_0']}]", "predict": "\n  - Please choose the needed API and return the API calling list according to the task instruction.\n  - The API \"checkDeviceStatus\" is called with the argument \"device_id\" set to \"mss2qhz2\". This API is called to check the status of the device with the given ID.\nAction: checkDeviceStatus\nAction Input: {\n  \"device_id\": \"mss2qhz2\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'secureCommunication', 'api_description': 'Establish a secure communication channel with an IoT device', 'field': 'Cybersecurity/IoT Security', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the IoT device (e.g., DEF456)', 'example': 'DEF456'}}, 'required': ['device_id'], 'responses': {'channel': {'type': 'str', 'description': 'The secure communication channel established with the device'}}}, {'api_name': 'secureDevice', 'api_description': 'Enhance security of an IoT device', 'field': 'Cybersecurity/IoT Security', 'parameters': {'device_id': {'type': 'str', 'description': 'ID of the IoT device to be secured'}, 'security_patches': {'type': 'bool', 'description': 'Apply security patches to the device (e.g., true, false)'}, 'firewall_enabled': {'type': 'bool', 'description': 'Enable firewall protection on the device (e.g., true, false)'}}, 'required': ['device_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the device security enhancement was successful'}}}, {'api_name': 'connectDevice', 'api_description': 'Establish a connection with an IoT device', 'field': 'Software/Internet of Things', 'parameters': {'device_id': {'type': 'str', 'description': 'The ID of the IoT device to connect'}, 'protocol': {'type': 'str', 'description': 'The protocol to use for communication with the device (e.g., MQTT, HTTP, CoAP)'}, 'credentials': {'type': 'str', 'description': 'The credentials required to authenticate the connection'}, 'timeout': {'type': 'int', 'description': 'The maximum time to wait for the connection to be established in seconds'}}, 'required': ['device_id', 'protocol'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the connection was successfully established or not'}, 'error_message': {'type': 'str', 'description': 'An error message describing the reason for connection failure (if any)'}}}, {'api_name': 'createNetworkDevice', 'api_description': 'Create a new network device', 'field': 'Information Technology/Network Administration', 'parameters': {'device_type': {'type': 'str', 'description': 'The type of network device to create (e.g., router, switch, firewall)'}, 'location': {'type': 'str', 'description': 'The location of the network device (e.g., data center, branch office)'}, 'ip_address': {'type': 'str', 'description': 'The IP address of the network device'}, 'username': {'type': 'str', 'description': 'The username for accessing the network device'}, 'password': {'type': 'str', 'description': 'The password for accessing the network device'}}, 'required': ['device_type', 'ip_address', 'username', 'password'], 'responses': {'device_id': {'type': 'str', 'description': 'The unique identifier of the created network device'}}}, {'api_name': 'scanNetwork', 'api_description': 'Scan the wireless network for potential security threats', 'field': 'Cybersecurity/Wireless Security', 'parameters': {'network_name': {'type': 'str', 'description': 'The name of the wireless network to scan (e.g., MyWiFi, CompanyNetwork)'}, 'scan_interval': {'type': 'int', 'description': 'The time interval between network scans in minutes (e.g., 10, 30, 60)'}, 'scan_duration': {'type': 'int', 'description': 'The duration of each network scan in seconds (e.g., 5, 10, 30)'}, 'detection_mode': {'type': 'str', 'description': 'The mode of detection to use during network scan (e.g., passive, active)'}, 'report_format': {'type': 'str', 'description': 'The desired format for the scan report (e.g., PDF, HTML, JSON)'}}, 'required': ['network_name'], 'responses': {'scan_results': {'type': 'str', 'description': 'The results of the network scan in the specified format'}, 'timestamp': {'type': 'str', 'description': 'The timestamp indicating when the scan was completed'}}}]\ntask_instruction = \"Establish secure communication with the device with the ID \"lYXdhPYTRe\".\"\nOutput:\n [/INST]", "label": "[{'api': 'secureCommunication', 'parameters': {'device_id': 'lYXdhPYTRe'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed API and return the API calling list according to the task instruction.\n\nI will choose the \"secureCommunication\" API from the given options. The API call is as follows:\n\n```\n{\n  \"api_name\": \"secureCommunication\",\n  \"api_description\": \"Establish a secure communication channel with an IoT device\",\n  \"field\": \"Cybersecurity/IoT Security\",\n  \"parameters\": {\n    \"device_id\": \"lYXdhPYTRe\"\n  }\n}\n```\n\nThis API call is made to establish a secure communication channel with the IoT device identified by the device ID \"lYXdhPYTRe\".\nAction: secureCommunication\nAction Input: {\n  \"device_id\": \"lYXdhPYTRe\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'blockDevice', 'api_description': 'Block the access of a specific IoT device to the network', 'field': 'Cybersecurity/IoT Security', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the IoT device (e.g., JKL012)', 'example': 'JKL012'}}, 'required': ['device_id'], 'responses': {'blocked': {'type': 'bool', 'description': 'Indicates whether the device access was successfully blocked'}}}, {'api_name': 'blockUser', 'api_description': 'Block a user from accessing the library network', 'field': 'Library Science/Library Network Security', 'parameters': {'username': {'type': 'str', 'description': 'The username of the user to be blocked'}}, 'required': ['username'], 'responses': {'blocked': {'type': 'bool', 'description': 'True if the user was successfully blocked, False otherwise'}}}, {'api_name': 'blockIP', 'api_description': 'Block a specific IP address from accessing the network', 'field': 'Information Technology/Network Security', 'parameters': {'ip': {'type': 'str', 'description': 'The IP address to be blocked from accessing the network'}}, 'required': ['ip'], 'responses': {'block_successful': {'type': 'bool', 'description': 'Indicates whether the IP address was successfully blocked'}}}, {'api_name': 'controlDevice', 'api_description': 'Control an embedded system device', 'field': 'Technology/Embedded Systems', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the embedded system'}, 'device_name': {'type': 'str', 'description': 'The name of the device to control'}, 'action': {'type': 'str', 'description': \"The action to perform on the device, such as 'on', 'off', or 'toggle'\"}}, 'required': ['device_id', 'device_name', 'action'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the device control action was successful'}, 'message': {'type': 'str', 'description': 'Additional information or error message'}}}, {'api_name': 'deletePharmacy', 'api_description': 'Delete a specific pharmacy from the system', 'field': 'Pharmacy/Pharmacy Administration', 'parameters': {'pharmacy_id': {'type': 'int', 'description': 'The unique identifier of the pharmacy'}}, 'required': ['pharmacy_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the pharmacy was successfully deleted'}}}]\ntask_instruction = \"Block the device with the ID \"ATIEe33nFedP\".\"\nOutput:\n [/INST]", "label": "[{'api': 'blockDevice', 'parameters': {'device_id': 'ATIEe33nFedP'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: blockDevice\nAction Input: {\n  \"device_id\": \"ATIEe33nFedP\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'secureDevice', 'api_description': 'Enhance security of an IoT device', 'field': 'Cybersecurity/IoT Security', 'parameters': {'device_id': {'type': 'str', 'description': 'ID of the IoT device to be secured'}, 'security_patches': {'type': 'bool', 'description': 'Apply security patches to the device (e.g., true, false)'}, 'firewall_enabled': {'type': 'bool', 'description': 'Enable firewall protection on the device (e.g., true, false)'}}, 'required': ['device_id'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the device security enhancement was successful'}}}, {'api_name': 'secureCommunication', 'api_description': 'Establish a secure communication channel with an IoT device', 'field': 'Cybersecurity/IoT Security', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the IoT device (e.g., DEF456)', 'example': 'DEF456'}}, 'required': ['device_id'], 'responses': {'channel': {'type': 'str', 'description': 'The secure communication channel established with the device'}}}, {'api_name': 'blockDevice', 'api_description': 'Block the access of a specific IoT device to the network', 'field': 'Cybersecurity/IoT Security', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the IoT device (e.g., JKL012)', 'example': 'JKL012'}}, 'required': ['device_id'], 'responses': {'blocked': {'type': 'bool', 'description': 'Indicates whether the device access was successfully blocked'}}}, {'api_name': 'controlDevice', 'api_description': 'Control an embedded system device', 'field': 'Technology/Embedded Systems', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the embedded system'}, 'device_name': {'type': 'str', 'description': 'The name of the device to control'}, 'action': {'type': 'str', 'description': \"The action to perform on the device, such as 'on', 'off', or 'toggle'\"}}, 'required': ['device_id', 'device_name', 'action'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the device control action was successful'}, 'message': {'type': 'str', 'description': 'Additional information or error message'}}}, {'api_name': 'getDeviceInfo', 'api_description': 'Retrieve device information of an iOS device', 'field': 'Mobile Development/iOS Development', 'parameters': {'device_type': {'type': 'str', 'description': 'The type of iOS device (e.g., iPhone, iPad)'}, 'model': {'type': 'str', 'description': 'The specific model of the iOS device (e.g., iPhone X, iPad Pro)'}, 'serial_number': {'type': 'str', 'description': 'The serial number of the iOS device'}}, 'required': ['device_type', 'serial_number'], 'responses': {'device_info': {'type': 'str', 'description': 'Detailed information about the specified iOS device'}}}]\ntask_instruction = \"Secure the device with the ID \"CxmjwID6F8Vs\".\"\nOutput:\n [/INST]", "label": "[{'api': 'secureDevice', 'parameters': {'device_id': 'CxmjwID6F8Vs'}, 'responses': ['API_call_0']}]", "predict": "\n\nAction: secureDevice\nAction Input: {\n  \"device_id\": \"CxmjwID6F8Vs\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'exploitVulnerability', 'api_description': 'Exploit a known vulnerability in a target system', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target_ip': {'type': 'str', 'description': 'The IP address of the target system to be exploited'}}, 'required': ['target_ip'], 'responses': {'exploited': {'type': 'bool', 'description': 'True if the exploit was successful, False otherwise'}}}, {'api_name': 'checkWebsiteSecurity', 'api_description': 'Check the security of a website', 'field': 'Technology/Internet Security', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the website to check'}}, 'required': ['website_url'], 'responses': {'security_score': {'type': 'float', 'description': 'The security score of the website'}}}, {'api_name': 'getGlobalThreats', 'api_description': 'Retrieve information on global security threats', 'field': 'Political Science/International Security', 'parameters': {'country': {'type': 'str', 'description': 'The name of the country for which you want to get security threat information (e.g., United States, China, Russia)'}, 'region': {'type': 'str', 'description': 'The region for which you want to get security threat information (e.g., Middle East, Asia-Pacific, Europe)'}, 'incident_type': {'type': 'str', 'description': 'The type of security incident for which you want to get information (e.g., terrorism, cyber attacks, military conflicts)'}}, 'required': ['country', 'region'], 'responses': {'threat_level': {'type': 'str', 'description': 'The level of threat in the specified country/region'}, 'incident_details': {'type': 'str', 'description': 'The details and analysis of the security incident'}, 'impact': {'type': 'str', 'description': 'The potential impact of the security incident on the country/region'}, 'recommendations': {'type': 'str', 'description': 'Recommendations for mitigating the security threat'}}}, {'api_name': 'testWebsite', 'api_description': 'Test a website for errors and bugs', 'field': 'Web Development/Testing and debugging', 'parameters': {'website_url': {'type': 'str', 'description': 'The URL of the website you want to test for errors'}}, 'required': ['website_url'], 'responses': {'errors_found': {'type': 'int', 'description': 'The number of errors and bugs found during the test'}, 'error_details': {'type': 'str', 'description': 'Detailed information about the errors and bugs found'}}}, {'api_name': 'executeEthicalHack', 'api_description': 'Perform ethical hacking activities on a target system', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target': {'type': 'str', 'description': 'The target system to be hacked'}}, 'required': ['target'], 'responses': {'result': {'type': 'str', 'description': 'The result of the ethical hacking activity'}}}]\ntask_instruction = \"Test the security vulnerability of a social media platform by executing an ethical hack.\"\nOutput:\n [/INST]", "label": "[{'api': 'executeEthicalHack', 'parameters': {'target': 'Social Media Platform'}, 'responses': ['API_call_0']}]", "predict": "\n\nPlease choose the needed apis and return api_calling list according to the task_instruction.\nAction: executeEthicalHack\nAction Input: {\n  \"target\": \"social media platform\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'executeSQLInjection', 'api_description': 'Perform a SQL injection attack on a target website', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target_url': {'type': 'str', 'description': 'The URL of the target website'}, 'payload': {'type': 'str', 'description': \"The SQL injection payload to be injected into the target website's input fields\"}}, 'required': ['target_url', 'payload'], 'responses': {'result': {'type': 'str', 'description': \"The result of the SQL injection attack (e.g., 'Success', 'Failed')\"}}}, {'api_name': 'generateRandomPassword', 'api_description': 'Generate a random password with specified length and complexity', 'field': 'Technology/Cybersecurity', 'parameters': {'length': {'type': 'int', 'description': 'The length of the password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the password (e.g., Low, Medium, High)'}}, 'required': ['length'], 'responses': {'password': {'type': 'str', 'description': 'The generated random password'}}}, {'api_name': 'generateSecurePassword', 'api_description': 'Generate a secure password with specified length and complexity', 'field': 'Technology/Computer Security', 'parameters': {'length': {'type': 'int', 'description': 'The length of the generated password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the generated password (e.g., low, medium, high)'}}, 'required': ['length', 'complexity'], 'responses': {'password': {'type': 'str', 'description': 'The generated secure password'}}}, {'api_name': 'changeDatabasePassword', 'api_description': 'Change the password of a database user', 'field': 'Cybersecurity/Database Security', 'parameters': {'database_name': {'type': 'str', 'description': 'The name of the database'}, 'username': {'type': 'str', 'description': 'The username of the user to change the password for'}, 'new_password': {'type': 'str', 'description': 'The new password for the user'}}, 'required': ['database_name', 'username', 'new_password'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates if the password change was successful or not'}}}, {'api_name': 'resetPassword', 'api_description': 'Reset the password for a user account', 'field': 'Cybersecurity/Identity and Access Management', 'parameters': {'username': {'type': 'str', 'description': 'The username of the account to reset the password for'}, 'new_password': {'type': 'str', 'description': 'The new password to be set for the user account'}, 'email': {'type': 'str', 'description': 'The email address associated with the user account'}}, 'required': ['username', 'new_password', 'email'], 'responses': {'success': {'type': 'bool', 'description': 'Indicates whether the password reset was successful or not'}, 'message': {'type': 'str', 'description': 'A message explaining the result of the password reset'}}}]\ntask_instruction = \"Retrieve the password by executing an SQL injection on the website \"https://samplewebsite.com\".\"\nOutput:\n [/INST]", "label": "[{'api': 'executeSQLInjection', 'parameters': {'target_url': 'https://samplewebsite.com', 'payload': \"') UNION SELECT password FROM users; -- \"}, 'responses': ['API_call_0']}]", "predict": "\nPlease choose the needed apis and return api_calling list according to the task_instruction.\n\nAction: executeSQLInjection\nAction Input: {\n  \"target_url\": \"https://samplewebsite.com\",\n  \"payload\": \"INSERT SQL_INJECTION_PAYLOAD_HERE\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'bruteForceAttack', 'api_description': 'Perform a brute force attack on a target system', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target_ip': {'type': 'str', 'description': 'The IP address of the target system for the brute force attack'}, 'username_list': {'type': 'str', 'description': 'List of usernames to be used for the attack (e.g., admin, root, user)'}, 'password_list': {'type': 'str', 'description': 'List of passwords to be used for the attack (e.g., password123, 123456, qwerty)'}, 'timeout': {'type': 'int', 'description': 'Timeout value in seconds for each attempt'}}, 'required': ['target_ip', 'username_list', 'password_list'], 'responses': {'success': {'type': 'bool', 'description': 'True if the brute force attack is successful, False otherwise'}}}, {'api_name': 'attackEnemy', 'api_description': 'Perform an attack on an enemy character in a role-playing game', 'field': 'Gaming/Role-playing games', 'parameters': {'attacker_id': {'type': 'str', 'description': 'The ID of the attacking character'}, 'target_id': {'type': 'str', 'description': 'The ID of the target enemy character'}}, 'required': ['attacker_id', 'target_id'], 'responses': {'damage_dealt': {'type': 'int', 'description': 'The amount of damage dealt to the target enemy'}}}, {'api_name': 'executeSQLInjection', 'api_description': 'Perform a SQL injection attack on a target website', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target_url': {'type': 'str', 'description': 'The URL of the target website'}, 'payload': {'type': 'str', 'description': \"The SQL injection payload to be injected into the target website's input fields\"}}, 'required': ['target_url', 'payload'], 'responses': {'result': {'type': 'str', 'description': \"The result of the SQL injection attack (e.g., 'Success', 'Failed')\"}}}, {'api_name': 'exploitVulnerability', 'api_description': 'Exploit a known vulnerability in a target system', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target_ip': {'type': 'str', 'description': 'The IP address of the target system to be exploited'}}, 'required': ['target_ip'], 'responses': {'exploited': {'type': 'bool', 'description': 'True if the exploit was successful, False otherwise'}}}, {'api_name': 'executeEthicalHack', 'api_description': 'Perform ethical hacking activities on a target system', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target': {'type': 'str', 'description': 'The target system to be hacked'}}, 'required': ['target'], 'responses': {'result': {'type': 'str', 'description': 'The result of the ethical hacking activity'}}}]\ntask_instruction = \"Perform a brute force attack on the IP address 192.168.131.183 using the username 'user' and password 'qwerty'.\"\nOutput:\n [/INST]", "label": "[{'api': 'bruteForceAttack', 'parameters': {'target_ip': '192.168.131.183', 'username_list': 'user', 'password_list': 'qwerty'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\nAction: bruteForceAttack\nAction Input: {\n  \"target_ip\": \"192.168.131.183\",\n  \"username_list\": \"user\",\n  \"password_list\": \"qwerty\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getWebsiteTraffic', 'api_description': 'Retrieve website traffic information', 'field': 'Information Technology/Digital Marketing', 'parameters': {'website': {'type': 'str', 'description': 'The website for which you want to get the traffic data (e.g., www.example.com)'}, 'time_period': {'type': 'str', 'description': 'Specify the time period for which you want to get the traffic data (e.g., last 7 days, last month)'}, 'country': {'type': 'str', 'description': 'Filter the traffic data for a specific country (e.g., United States, United Kingdom)'}}, 'required': ['website'], 'responses': {'visitors': {'type': 'int', 'description': 'The number of visitors to the specified website'}, 'page_views': {'type': 'int', 'description': 'The total number of page views on the specified website'}, 'bounce_rate': {'type': 'float', 'description': 'The percentage of visitors who leave the website without visiting any other pages'}}}, {'api_name': 'sniffNetworkTraffic', 'api_description': 'Sniff network traffic on a specified network interface', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'interface': {'type': 'str', 'description': 'The network interface to sniff traffic on (e.g., eth0, wlan0)'}, 'filter': {'type': 'str', 'description': 'Filter to apply to captured traffic (e.g., port 80, host 192.168.0.1)'}}, 'required': ['interface'], 'responses': {'captured_packets': {'type': 'str', 'description': 'List of captured network packets'}}}, {'api_name': 'getTrafficInfo', 'api_description': 'Retrieve current traffic information', 'field': 'Transportation/Land Transportation', 'parameters': {'location': {'type': 'str', 'description': 'The location for which you want to get the traffic information (e.g., city name, address)'}, 'time': {'type': 'str', 'description': 'Specify a time for traffic information (e.g., morning rush hour, afternoon, night)'}}, 'required': ['location'], 'responses': {'traffic_data': {'type': 'str', 'description': 'The current traffic data at the specified location'}}}, {'api_name': 'getNetworkCapacity', 'api_description': 'Retrieve the network capacity of a telecommunications network', 'field': 'Telecommunications/Network Design and Planning', 'parameters': {'network_type': {'type': 'str', 'description': 'The type of network (e.g., 4G, 5G)'}, 'area_size': {'type': 'str', 'description': 'The size of the area for which you want to calculate network capacity (e.g., city, region)'}}, 'required': ['network_type', 'area_size'], 'responses': {'network_capacity': {'type': 'int', 'description': 'The network capacity of the specified telecommunications network'}}}, {'api_name': 'getNetworkSpeed', 'api_description': 'Retrieve the current network speed', 'field': 'Telecommunications/Next-Generation Networks', 'parameters': {'location': {'type': 'str', 'description': 'The location where the network speed is required (e.g., New York, Tokyo, London)'}, 'provider': {'type': 'str', 'description': 'The network provider (e.g., Verizon, AT&T, T-Mobile)'}}, 'required': ['location'], 'responses': {'speed': {'type': 'float', 'description': 'The current network speed at the specified location'}, 'unit': {'type': 'str', 'description': 'The unit of network speed (e.g., Mbps, Gbps)'}}}]\ntask_instruction = \"Retrieve network traffic information for the 'eth0' interface.\"\nOutput:\n [/INST]", "label": "[{'api': 'sniffNetworkTraffic', 'parameters': {'interface': 'eth0'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\n\n[{\"api\": \"sniffNetworkTraffic\", \"parameters\": {\"interface\": \"eth0\"}, \"responses\": [\"API_call_0\",\"API_call_1\",\"API_call_2\"]}]\n\n\nAction: sniffNetworkTraffic\nAction Input: {\n  \"interface\": \"eth0\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'exploitVulnerability', 'api_description': 'Exploit a known vulnerability in a target system', 'field': 'Cybersecurity/Ethical Hacking', 'parameters': {'target_ip': {'type': 'str', 'description': 'The IP address of the target system to be exploited'}}, 'required': ['target_ip'], 'responses': {'exploited': {'type': 'bool', 'description': 'True if the exploit was successful, False otherwise'}}}, {'api_name': 'checkVulnerability', 'api_description': 'Check if a system has any vulnerabilities', 'field': 'Technology/Cybersecurity', 'parameters': {'ip_address': {'type': 'str', 'description': 'The IP address of the system to be checked for vulnerabilities'}, 'port': {'type': 'int', 'description': 'The port number to be scanned for vulnerabilities'}, 'scan_type': {'type': 'str', 'description': 'Specify the type of scan to be performed (e.g., quick, full, stealth)'}}, 'required': ['ip_address'], 'responses': {'vulnerabilities_found': {'type': 'bool', 'description': 'Indicates whether any vulnerabilities were found during the scan'}, 'vulnerability_details': {'type': 'str', 'description': 'Details about the vulnerabilities found (if any)'}}}, {'api_name': 'scanVulnerabilities', 'api_description': 'Scan a system or network for vulnerabilities', 'field': 'Information Technology/Cybersecurity', 'parameters': {'target': {'type': 'str', 'description': 'The target system or network to be scanned'}, 'scan_type': {'type': 'str', 'description': 'The type of scan to be performed (e.g., port scanning, vulnerability scanning)'}}, 'required': ['target', 'scan_type'], 'responses': {'vulnerabilities': {'type': 'str', 'description': 'The detected vulnerabilities'}}}, {'api_name': 'detectMaliciousActivity', 'api_description': 'Detects and identifies malicious activity in a network or system using artificial intelligence techniques', 'field': 'Cybersecurity/Artificial Intelligence for Cybersecurity', 'parameters': {'data': {'type': 'str', 'description': 'The data or log file to be analyzed for potential malicious activity'}, 'algorithm': {'type': 'str', 'description': 'The algorithm to be used for the analysis (e.g., machine learning, deep learning)'}}, 'required': ['data', 'algorithm'], 'responses': {'malicious_activity': {'type': 'bool', 'description': 'Flag indicating whether malicious activity is detected'}, 'result': {'type': 'str', 'description': 'The detailed result of the analysis'}}}, {'api_name': 'scanApplication', 'api_description': 'Scans an application for potential security vulnerabilities.', 'field': 'Cybersecurity/Application Security', 'parameters': {'application_id': {'type': 'str', 'description': 'The ID of the application to be scanned'}, 'scan_type': {'type': 'str', 'description': 'The type of scan to be performed (e.g., static analysis, dynamic analysis)'}, 'scan_level': {'type': 'str', 'description': 'The level of scan intensity (e.g., low, medium, high)'}, 'timeout': {'type': 'int', 'description': 'The maximum time in seconds allowed for the scan to complete'}}, 'required': ['application_id'], 'responses': {'results': {'type': 'str', 'description': 'The scan results in a human-readable format'}, 'vulnerabilities': {'type': 'str', 'description': 'List of discovered vulnerabilities'}}}]\ntask_instruction = \"Detect and exploit the vulnerability of the target IP address \"192.168.244.220\".\"\nOutput:\n [/INST]", "label": "[{'api': 'exploitVulnerability', 'parameters': {'target_ip': '192.168.244.220'}, 'responses': ['API_call_0']}]", "predict": "\n  - Please choose the needed apis and return api_calling list according to the task_instruction.\n  - The API call \"exploitVulnerability\" is used to exploit a known vulnerability in a target system. The current arguments for the API call are the target IP address \"192.168.244.220\". This API call is made to fulfill the task instruction of detecting and exploiting the vulnerability of the target IP address.\nAction: exploitVulnerability\nAction Input: {\n  \"target_ip\": \"192.168.244.220\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'generateSecurityGuidelines', 'api_description': 'Generate secure coding guidelines for a specific programming language', 'field': 'Cybersecurity/Secure Software Development', 'parameters': {'language': {'type': 'str', 'description': 'The programming language for which secure coding guidelines are desired (e.g., JavaScript, C#, Swift)'}, 'compliance': {'type': 'bool', 'description': 'Flag indicating if the guidelines should comply with specific security standards (e.g., PCI DSS, OWASP Top 10)'}, 'industry': {'type': 'str', 'description': 'The industry or sector to which the software belongs (e.g., Finance, Healthcare, E-commerce)'}}, 'required': ['language'], 'responses': {'guidelines': {'type': 'str', 'description': 'Secure coding guidelines for the specified language'}}}, {'api_name': 'getIHLGuidelines', 'api_description': 'Retrieve guidelines for International Humanitarian Law', 'field': 'Non-profit/International Humanitarian Law', 'parameters': {}, 'required': [], 'responses': {'guidelines': {'type': 'str', 'description': 'The guidelines for International Humanitarian Law'}}}, {'api_name': 'getGlobalThreats', 'api_description': 'Retrieve information on global security threats', 'field': 'Political Science/International Security', 'parameters': {'country': {'type': 'str', 'description': 'The name of the country for which you want to get security threat information (e.g., United States, China, Russia)'}, 'region': {'type': 'str', 'description': 'The region for which you want to get security threat information (e.g., Middle East, Asia-Pacific, Europe)'}, 'incident_type': {'type': 'str', 'description': 'The type of security incident for which you want to get information (e.g., terrorism, cyber attacks, military conflicts)'}}, 'required': ['country', 'region'], 'responses': {'threat_level': {'type': 'str', 'description': 'The level of threat in the specified country/region'}, 'incident_details': {'type': 'str', 'description': 'The details and analysis of the security incident'}, 'impact': {'type': 'str', 'description': 'The potential impact of the security incident on the country/region'}, 'recommendations': {'type': 'str', 'description': 'Recommendations for mitigating the security threat'}}}, {'api_name': 'getCountrySecurity', 'api_description': 'Retrieve international security information for a specific country', 'field': 'Political Science/International Security', 'parameters': {'country': {'type': 'str', 'description': 'The name of the country for which you want to get the security information (e.g., United States, Russia, China)'}, 'year': {'type': 'int', 'description': 'The year for which you want to get the security information (e.g., 2021, 2022, 2023)'}, 'security_level': {'type': 'str', 'description': 'Specify a security level for the country (e.g., high, medium, low)'}}, 'required': ['country', 'year'], 'responses': {'security_score': {'type': 'float', 'description': 'The security score of the country for the specified year'}, 'threats': {'type': 'str', 'description': 'The major security threats faced by the country'}}}, {'api_name': 'generateSecurePassword', 'api_description': 'Generate a secure password with specified length and complexity', 'field': 'Technology/Computer Security', 'parameters': {'length': {'type': 'int', 'description': 'The length of the generated password'}, 'complexity': {'type': 'str', 'description': 'The complexity level of the generated password (e.g., low, medium, high)'}}, 'required': ['length', 'complexity'], 'responses': {'password': {'type': 'str', 'description': 'The generated secure password'}}}]\ntask_instruction = \"Tell me how to generate security guidelines in the language \"yJh7XlARlZmg\".\"\nOutput:\n [/INST]", "label": "[{'api': 'generateSecurityGuidelines', 'parameters': {'language': 'yJh7XlARlZmg'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\nAction: generateSecurityGuidelines\nAction Input: {\n  \"language\": \"yJh7XlARlZmg\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getVideoSurveillanceFeed', 'api_description': 'Retrieve a live video surveillance feed from a physical security system', 'field': 'Cybersecurity/Physical Security', 'parameters': {'location': {'type': 'str', 'description': 'The location from where you want to retrieve the video surveillance feed (e.g. building, data center, office)'}, 'camera_id': {'type': 'str', 'description': 'The ID of the camera from which you want to retrieve the feed'}}, 'required': ['location', 'camera_id'], 'responses': {'video_feed': {'type': 'str', 'description': 'The URL or stream for accessing the live video surveillance feed'}}}, {'api_name': 'getEthicsOfSurveillance', 'api_description': 'Retrieve information about the ethics of surveillance', 'field': 'Ethics/Ethics of Surveillance', 'parameters': {}, 'required': [], 'responses': {'information': {'type': 'str', 'description': 'Information about the ethics of surveillance'}}}, {'api_name': 'getCameraEquipment', 'api_description': 'Retrieve information about camera equipment used in a film', 'field': 'Film/Cinematography', 'parameters': {'film_title': {'type': 'str', 'description': 'The title of the film you want to get camera equipment information for (e.g., The Godfather, Titanic)'}, 'scene_number': {'type': 'int', 'description': 'The scene number for which you want to get camera equipment information (e.g., 1, 2, 3, ...)'}}, 'required': ['film_title'], 'responses': {'camera_brand': {'type': 'str', 'description': 'The brand of the camera used for the specified scene'}, 'camera_model': {'type': 'str', 'description': 'The model of the camera used for the specified scene'}, 'lens_brand': {'type': 'str', 'description': 'The brand of the lens used for the specified scene'}, 'lens_model': {'type': 'str', 'description': 'The model of the lens used for the specified scene'}}}, {'api_name': 'detectIS', 'api_description': 'Detect International Sign Language in a video', 'field': 'Foreign Languages/International Sign', 'parameters': {'video': {'type': 'str', 'description': 'The video file containing International Sign Language'}}, 'required': ['video'], 'responses': {'is_detected': {'type': 'bool', 'description': 'Indicates whether International Sign Language is detected in the video'}}}, {'api_name': 'getVideoAd', 'api_description': 'Retrieve a video advertisement', 'field': 'Advertising/Video advertising', 'parameters': {'length': {'type': 'int', 'description': 'The desired length of the video advertisement in seconds (e.g., 15, 30, 60)'}, 'interests': {'type': 'str', 'description': 'The target interests for the video advertisement (e.g., sports, music, technology)'}, 'location': {'type': 'str', 'description': 'The location for which the video advertisement should be tailored (e.g., New York, London, Tokyo)'}}, 'required': ['length'], 'responses': {'video_url': {'type': 'str', 'description': 'The URL of the video advertisement'}, 'interests': {'type': 'str', 'description': 'The target interests for the video advertisement'}, 'location': {'type': 'str', 'description': 'The location for which the video advertisement is tailored'}}}]\ntask_instruction = \"Retrieve the video surveillance feed for the camera with ID 'YgSC7KRZI' at location 'gO1KoCXZeX'.\"\nOutput:\n [/INST]", "label": "[{'api': 'getVideoSurveillanceFeed', 'parameters': {'location': 'gO1KoCXZeX', 'camera_id': 'YgSC7KRZI'}, 'responses': ['API_call_0']}]", "predict": "Please choose the needed apis and return api_calling list according to the task_instruction.\nAction: getVideoSurveillanceFeed\nAction Input: {\n  \"location\": \"gO1KoCXZeX\",\n  \"camera_id\": \"YgSC7KRZI\"\n}"}
{"prompt": "[INST] Please chooose the needed apis and return api_calling list according to the task_instruction.\nOutput format: [{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_0\",\"API_call_1\"]},{\"api\": \"\", \"parameters\": {\"\": \"\"}, \"responses\": [\"API_call_2\"]}]\nResponses can be used as parameter value. The number of responses depends on information in api_list.\n\nInput:\napi_list = [{'api_name': 'getTemperatureSensorData', 'api_description': 'Retrieve temperature sensor data', 'field': 'Internet of Things/Embedded Systems', 'parameters': {'device_id': {'type': 'str', 'description': 'The ID of the temperature sensor device'}}, 'required': ['device_id'], 'responses': {'temperature_data': {'type': 'float', 'description': 'Temperature data measured by the sensor'}}}, {'api_name': 'readSensorData', 'api_description': 'Read sensor data from the embedded device', 'field': 'Software/Embedded programming', 'parameters': {'device_id': {'type': 'str', 'description': 'The ID of the embedded device from which to read sensor data'}, 'sensor_type': {'type': 'str', 'description': 'The type of sensor from which to read data (e.g., temperature, humidity)'}, 'sampling_rate': {'type': 'int', 'description': 'The sampling rate at which the sensor data should be read (e.g., 1, 5, 10 samples per second)'}}, 'required': ['device_id', 'sensor_type'], 'responses': {'sensor_data': {'type': 'float', 'description': 'The sensor data readings'}, 'timestamp': {'type': 'str', 'description': 'The timestamp when the sensor data was read'}}}, {'api_name': 'getSensorsData', 'api_description': 'Retrieve data from sensors in a cyber-physical system', 'field': 'Technology/Cyber-Physical Systems', 'parameters': {'system_id': {'type': 'str', 'description': 'The ID of the cyber-physical system from which to retrieve data'}, 'sensor_type': {'type': 'str', 'description': 'The type of sensor for which to retrieve data (e.g., temperature, humidity, pressure)'}, 'time_range': {'type': 'str', 'description': 'The time range for which to retrieve data (e.g., last hour, last day, last week)'}}, 'required': ['system_id', 'sensor_type'], 'responses': {'data': {'type': 'str', 'description': 'The retrieved sensor data as a string or JSON object'}}}, {'api_name': 'getGreenhouseSensorData', 'api_description': 'Retrieve sensor data from greenhouse', 'field': 'Agriculture/Greenhouse farming', 'parameters': {'greenhouse_id': {'type': 'str', 'description': 'The ID of the greenhouse for which you want to retrieve sensor data'}}, 'required': ['greenhouse_id'], 'responses': {'temperature': {'type': 'float', 'description': 'The current temperature inside the greenhouse'}, 'humidity': {'type': 'float', 'description': 'The current humidity inside the greenhouse'}, 'light_intensity': {'type': 'int', 'description': 'The current light intensity inside the greenhouse'}}}, {'api_name': 'getDeviceData', 'api_description': 'Retrieve the data from a specific IoT device', 'field': 'Telecommunications/Internet of Things (IoT)', 'parameters': {'device_id': {'type': 'str', 'description': 'The unique identifier of the IoT device'}, 'start_time': {'type': 'str', 'description': 'The start time to retrieve data from (e.g., YYYY-MM-DD HH:MM:SS)'}, 'end_time': {'type': 'str', 'description': 'The end time to retrieve data until (e.g., YYYY-MM-DD HH:MM:SS)'}}, 'required': ['device_id'], 'responses': {'data': {'type': 'str', 'description': 'The data collected by the IoT device'}}}]\ntask_instruction = \"Retrieve the temperature sensor data for the device with ID \"NTioRsYcsqUE\".\"\nOutput:\n [/INST]", "label": "[{'api': 'getTemperatureSensorData', 'parameters': {'device_id': 'NTioRsYcsqUE'}, 'responses': ['API_call_0']}]", "predict": "\nRetrieve the temperature sensor data for the device with ID \"NTioRsYcsqUE\".\nAction: getTemperatureSensorData\nAction Input: {\n  \"device_id\": \"NTioRsYcsqUE\"\n}"}